(function(){var e={9711:function(e,n,t){"use strict";t.r(n),n["default"]=t.p+"54d851292e333dac0af491fe38fa45f0.pdf"},3534:function(e,n,t){"use strict";t.r(n),t.d(n,{achievements:function(){return s}});var i=t(2262);const o=(e,n,t)=>({label:e,name:n,width:t}),a=(e,n,t,i)=>{let o={name:e,description:`<div style="text-align: justify;">${n}</div>`,dataTypes:t,dataTable:[]};for(let a of i){let e={};for(let n=0;n<t.length;n++)e[t[n].name]=a[n];o.dataTable.push(e)}return o},s=(0,i.iH)([a("American Mathematics Competitions (AMC)",'<a href="https://www.maa.org/math-competitions" target="_blank">American Mathematics Competitions</a>\n                   is the competition organized by Mathematics Association Of America.\n                   People who get enough mark in AMC 10/12 is able to do\n                   <a href="https://www.maa.org/math-competitions/invitational-competitions" target="_blank">\n                        American Invitational Mathematics Exam\n                   </a>(AIME)',[o("Contest","name",60),o("Time","time",40),o("Score","score",45),o("Other","other",80)],[["AMC 10B",2020,"108/150","Qualified to take AIME"],["AMC 12B",2021,"85.5/150","Qualified to take AIME"]]),a("Canadian Open Mathematics Challenge","<a href=\"https://cms.math.ca/competitions/\">Canadian Open Mathematics Challenge</a> (COMC)\n                   is Canada's premier national mathematics competition.\n                   Participants get enough marks in COMC is allowed to take Canadian Mathematics Olympiads (CMO)\n                   Participants don't get enough for CMO but close will be invited to write \n                   CMO Qualifying RepÃªchage Competition (CMOQR), and participants who get good result in CMOQR are also qualified for CMO",[o("Time","time",40),o("Score","score",40),o("CMOQR Cutoff","cmoqrCutoff",60),o("CMO Cutoff","cmoCutoff",60)],[[2021,"67/80",62,68]]),a("Canadian Computing Competition",'<a href="https://cemc.uwaterloo.ca/contests/ccc-cco.html" target="_blank">Canadian Computing Competition</a>\n                   (CCC) is the competition organized by University of Waterloo.\n                   It is one of the most premier high school computing competition in Canada.',[o("Level","name",40),o("Time","time",40),o("Score","score",40),o("Rank","rank",50)],[["Junior",2020,"64/75","286/3769"],["Senior",2021,"52/75","107/2920"],["Senior",2022,"51/75","55/3262"]]),a("Competitive Programming Websites Info","Following is my information on some competitive programming websites",[o("Website","name",80),o("Account","account",80),o("Rank Now","rankNow",60),o("Rank Highest","rankHigh",80)],[["<a href='https://dmoj.ca/' target=\"_blank\">DM::OJ</a>",'<a href="https://dmoj.ca/user/YidiChen" target="_blank">YidiChen</a>',"2054 (Master)","2054 (Master)"],["<a href='https://codeforces.com/' target=\"_blank\">Codeforces</a>",'<a href="https://codeforces.com/profile/ericchenxktz" target="_blank">ericchenxktz</a>',"1462 (Specialist)","1589 (Specialist)"]])])},2552:function(e,n,t){"use strict";t.r(n),t.d(n,{avatar:function(){return a},biography:function(){return s},name:function(){return o},title:function(){return i}});const i="Yidi's Website",o="Yidi Chen",a="@/assets/img/head.png",s="Math 27 University of Waterloo"},3162:function(e,n,t){"use strict";t.r(n),t.d(n,{blogs:function(){return p},getBlog:function(){return m}});var i=t(3478),o=t(1207),a=t(6319),s=t(7545),r=t(923),l=t(78),c=t(5041),d=t(9253),h=t(1566),u=t(2702);const p=[i.NumberRecognition,o.CodeforcesLuckyChains,a.AGC044C,s.CCC23S4,r.CollectCoin,l.CodeforcesMonsters,c.MinimizeMaximumDifference,d.CodeForces872D2,h.VikaAndWiki,u.Codeforces9012E].sort(((e,n)=>n.createDate-e.createDate)).map(((e,n)=>e.idWith(n))),m=e=>p[e]},9821:function(e,n,t){"use strict";t.r(n),t.d(n,{externalLinks:function(){return a}});var i=t(2262);function o(e,n,t){return{name:e,img:n,link:t}}const a=(0,i.iH)([o("Markham, ON","img/map_location.svg",""),o("Github","img/github.svg","https://github.com/XKTZ"),o("Linkedin","img/linkedin.svg","https://www.linkedin.com/in/yidi-chen-a5a1a822a/"),o("Email","img/message.svg","mailto:ericchenxktz@gmail.com")])},3686:function(e,n,t){"use strict";t.r(n),t.d(n,{getNote:function(){return s},notes:function(){return a}});t(3436);var i=t(1439),o=t(7208);const a=[i.AIGeneral,o.ResNet].sort(((e,n)=>e.title<n.title)).map(((e,n)=>e.idWith(n))),s=e=>a[e]},4653:function(e,n,t){"use strict";t.r(n),t.d(n,{projects:function(){return a}});var i=t(2262);const o=(e,n,t,i)=>({name:e,desc:n,img:t,link:i}),a=(0,i.iH)([o("Xkamework","A java inverse of controlling framework supporting dependency injection","projects/xkamework.png","https://github.com/XKTZ/xkamework"),o("Neural Network in Numpy","A library built in Numpy for supporting the deep learning neural network","projects/numpy_nn.png","https://github.com/XKTZ/mlp-in-numpy"),o("Email Manager","An email manager intended to make email management similar to accessing in a file explorer","projects/email_manager.png","https://github.com/XKTZ/email-manager"),o("Game Of Generals","A game of generals game written in java, able to play in local area network","projects/game_of_generals.png","https://github.com/XKTZ/cpt-game-of-generals"),o("Website2.0","My website 2.0 version written in Vue3 and Element-Plus","projects/website2.0.png","https://github.com/XKTZ/website2.0"),o("Starcraft2 Process Helper","A Java & JavaFX program helping record the buildling process in starcraft-2","projects/sc2_helper.png","https://github.com/XKTZ/sc2-process")])},3270:function(e,n,t){"use strict";t.r(n),t.d(n,{skills:function(){return s}});var i=t(2262);const o=function(...e){const n=[];for(let t of e)n.push(t);return n},a=function(e,n){return{title:e,tags:n}},s=(0,i.iH)([a("Backend",o("Java","Spring","SpringBoot","C++","Python")),a("Frontend",o("HTML","CSS","Javascript","Vue","Element-Plus")),a("Database",o("MySQL"))])},9743:function(e,n,t){"use strict";t.r(n),t.d(n,{subpages:function(){return a}});const i=(e,n)=>({router:!0,name:e,path:n}),o=(e,n)=>({router:!1,name:e,path:n}),a=[i("Home","/"),i("Projects","/projects"),i("Notes","/notes"),i("Blogs","/blogs"),i("Skills","/skills"),i("Achievements","/achievements"),o("Resume",`${t(9711)["default"]}`)]},4685:function(e,n,t){"use strict";t.r(n),t.d(n,{BlogDefinition:function(){return o},BlogPaths:function(){return c},BlogTags:function(){return d},codeBlockOf:function(){return s},imgOf:function(){return r},urlOf:function(){return l}});const i=e=>e.split(" ").map((e=>e.toLowerCase())).join("-");class o{id;title;urlTitle;paths;content;contentType;tags;createDate;updateDate;constructor({title:e,paths:n,content:t,contentType:o,tags:a,createDate:s,updateDate:r}){this.title=e,this.urlTitle=i(this.title),this.paths=n,this.content=t,this.contentType=o,this.tags=a,this.createDate=s,this.updateDate=r}idWith(e){return this.id=e,this}}const a=(e,n)=>{let t=0,i=e.length-1;while(t<=i&&e[t]===n)t++;while(i>=t&&e[i]===n)i--;return t>i?"":e.substring(t,i+1)},s=(e,n)=>a(`\n\`\`\`${e}\n${a(n,"\n")}\n\`\`\`\n`,"\n"),r=(e,n="")=>`![${n}](${e})`,l=(e,n="")=>`[${n}](${e})`,c={AI:["Artificial Intelligence"],Pytorch:["Artificial Intelligence","Pytorch"],SoftwareDevelopment:["Software Development"],Algorithms:["Algorithms"],Codeforces:["Algorithms","Codeforces"],Atcoder:["Algorithms","Atcoder"],LeetCode:["Algorithms","LeetCode"],CCC:["Algorithms","CCC"],Hibernate:["Software Development","Hibernate"]},d={AI:"Artificial Intelligence",Pytorch:"Pytorch",Algorithms:"Algorithms",Codeforces:"Codeforces"}},6319:function(e,n,t){"use strict";t.r(n),t.d(n,{AGC044C:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,1,7),s=new Date(2023,1,7),r=`\nThe original question is: ${(0,i.urlOf)("https://atcoder.jp/contests/agc044/tasks/agc044_c","AGC 44-C")}.\n\nQuestion is asking maintain a set of 3-digit numbers modulus 3^N. There are two different operations:\n\n1. Swap all 1 positions and 2 positions in base-3\n2. Add 1 in all the number\n\nWe could use a **trie** to maintain the set of numbers. \n\nFor operation 1, we use **lazy propagation** on trie to do the operation in $O(1)$.\n\nFor operation 2, we want an add1 operation on number. So we maintain the trie reversely - instead of goes from high bit -> low bit, we go from low bit -> high bit.\n\nNormally the trie is like:\n\n${(0,i.codeBlockOf)("cpp","\n    if (depth == N) {\n        val[x] = valon ++;\n    } else {\n        tr[x][0] = build(depth + 1);\n        tr[x][1] = build(depth + 1);\n        ...\n    }\n")}\n\nIn this case the trie is building from high bit to low bit. Reversely, in this question, we save the low bit at first, then save high bit.\n\nThen, the add1 operation becomes, tr[x][0] -> tr[x][1], tr[x][1] -> tr[x][2], tr[x][2] -> tr[x][0], then add1 on tr[x][0] (original tr[x][2]).\n\nSo it is $O(log(N))$\n\n${(0,i.codeBlockOf)("cpp","\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nconstexpr ll MAXN = 12;\nconstexpr ll MAXM = 2e6 + 5;\n\nll pow3[MAXN + 1];\n\nll son[MAXM][3];\nll val[MAXM];\nbool lazy[MAXM];\nll ton = 1;\n\ninline void pushdown(ll x) {\n    if (lazy[x]) {\n        lazy[son[x][0]] = !lazy[son[x][0]];\n        lazy[son[x][1]] = !lazy[son[x][1]];\n        lazy[son[x][2]] = !lazy[son[x][2]];\n        swap(son[x][1], son[x][2]);\n        lazy[x] = false;\n    }\n}\n\ninline void S(ll x) {\n    if (x == 0)\n        return;\n    lazy[x] = !lazy[x];\n}\n\ninline void R(ll x) {\n    if (x == 0)\n        return;\n    pushdown(x);\n    swap(son[x][0], son[x][1]);\n    swap(son[x][0], son[x][2]);\n    R(son[x][0]);\n}\n\nll N;\nstring s;\n\ninline ll btree(ll depth, ll pon) {\n    ll t = ton++;\n    if (depth == N) {\n        val[t] = pon;\n    } else {\n        val[t] = -1;\n        son[t][0] = btree(depth + 1, pon);\n        son[t][1] = btree(depth + 1, pon + pow3[depth]);\n        son[t][2] = btree(depth + 1, pon + 2 * pow3[depth]);\n    }\n    return t;\n}\n\nll pos[MAXM];\n\ninline void calcpos(ll depth, ll x, ll pon) {\n    pushdown(x);\n    if (val[x] >= 0) {\n        pos[val[x]] = pon;\n        return;\n    } else {\n        calcpos(depth + 1, son[x][0], pon);\n        calcpos(depth + 1, son[x][1], pon + pow3[depth]);\n        calcpos(depth + 1, son[x][2], pon + 2 * pow3[depth]);\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    cin >> N;\n    cin >> s;\n\n    pow3[0] = 1;\n    for (ll i = 1; i <= N; i++){\n        pow3[i] = pow3[i - 1] * 3;\n    }\n\n    ll rt = btree(0, 0);\n\n    for (auto c : s) {\n        if (c == 'S') {\n            S(rt);\n        } else {\n            R(rt);\n        }\n    }\n    calcpos(0, rt, 0);\n\n    for (ll i = 0; i < pow3[N]; i++) {\n        cout << pos[i] << ' ';\n    }\n    cout << '\\n';\n}\n")}\n\n### Extension\n\nOther than simply swapping two positions, there are also other more complex operations able to be done on trie with lazy propagation.\n\nFor example, for an XOR operation, we could save the XORed Number as lazy notation.\n\nAnd we could also do a minus1 operation on the trie. \n`,l=new i.BlogDefinition({title:"AGC 044 C: Strange Dance (Set of Base-K Numbers Wth Bit and Add Operation)",paths:i.BlogPaths.Atcoder,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms],createDate:a,updateDate:s})},7545:function(e,n,t){"use strict";t.r(n),t.d(n,{CCC23S4:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,2,18),s=new Date(2023,2,18),r="\nOriginal question is from Canadian Computing Competition 2023, Senior 4.\n\nThis question is a variance of minimum spanning tree. We sort all edges and check the distance between vertexes at each addition.\n\nFirstly, if adding an edge $e = (u, v, w)$ changes the overall weight, then the $\\text{dis}[u, v]$ must has been changed.\n\nProof: if $\\text{dis}[u, v] < e_w$, then going through the path from $u$ to $v$ will be better to go through the edge.\n\nThen, if $\\text{dis}[u, v]$ has been changed, then we need the edge $e = (u, v, w)$.\n\nProof: at least we need to update a path from $u$ to $v$. So we need this edge.\n\nSolution:\n\nAt first, we sort all edges by (length, cost). Then we prove by induction:\n\nAssume at edge $(k-1)$s, we have used some edges. Then, at edge $k$, we know original distance between $u$ and $v$:\n\n1. If $\\text{dis}[u, v] < length$, then we obviously don't need to add this edge. We know we don't need to add it in future because length is sorted.\n2. If $\\text{dis}[u, v] > length$, then we obviously need to add this edge. We know add future edges will not help because it is sorted in length.\n3. If $\\text{dis}[u, v] = length$, this is a special case we need to argue. We want to prove, in this case, we don't need to add edge:\n\nIf $\\text{dis}[u, v] = length$, then we know there exists a path from $u$ to $v$ which is same as length of edge. Because our induction case is all necessary edges in past, so it is better for us to not add such edge to save the cost.\n    \nSo, we only add this edge if $\\text{dis}[u, v] > length$.\n\nSo we just do a MST then dijkstra for each pair of points.\n",l=new i.BlogDefinition({title:"CCC 23 S4: Minimum Cost Roads",paths:i.BlogPaths.CCC,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,"Graph Theory","Minimum Spanning Tree","Dijkstra"],createDate:a,updateDate:s})},9253:function(e,n,t){"use strict";t.r(n),t.d(n,{CodeForces872D2:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,5,13),s=new Date(2023,5,13),r=`\nOriginal question is ${(0,i.urlOf)("https://codeforces.com/contest/1825/problem/D2","Floating Islands")}.\n\n## My original idea\n\n$$\n\\begin{array}{l}\n\\mathbb{E}(\\#) \\\\\n= \\sum_{F} p(F) \\sum_i F(i) \\\\\n= \\dfrac{1}{\\binom{N}{K}} \\sum_i \\sum_{F} F(i)\n\\end{array}\n$$\n\n$F: \\mathbb{N} \\to \\{0, 1\\}$ is an arrangement, output if $i$ is good node.\n\nThen, we want to calculate \\sum_{F} F(i). We observe that, a node is a good node if and only if for all its childrens, $sz_i$ (chosen in children) have $c_i \\leq \\dfrac{k}{2}$.\n\nBut, then I don't know how to calculate this combination. It seems here we need an $O(N^2)$ dp.\n\n## Correct Idea:\n\nWe notice that, if $K$ is odd, then answer is $1$, because \\textbf{transition} from $x$ to $y$ will always make cost different. Transition means transfer from good node $a$ to good node $b$ where exists a path $a \\to b$.\n\nIf $K$ is even, we observe that, if there exists two good nodes $x$ and $y$. Then, $sz_x = K - sz_x$, and $sz_y = K - sz_y$. And at the same time, $sz_x = sz_y$. $sz_i$ is number of chosen nodes under subtree $i$.\n\nProof: If $sz_x \\neq K - sz_x$, then $sz_x > K - sz_x$. Because otherwise if $sz_x < K - sz_x$, we can move to parent of $x$, which will be better than $x$, so $x$ isn't good. It is the same for $y$.\n\nIf $y$ is in subtree of $x$ or $x$ is in subtree of $y$, WLOG, let $y$ be $x$'s parent. From $x$ moving to $y$ in each step $u \\to u'$, we will have:\n\n$K - sz_u < sz_u \\leq sz_\\{u'\\}$. We lost $sz_u$, earning $K - sz_u$. Resulting in $K - sz_u - sz_u < 0$'s benefit. And in $u'$, we have $K - sz_\\{u'\\} < sz_\\{u'\\}$.\n\nSo, total benefit is decreasing. $y$ can't be a good node.\n\nIf $y$ is in some of $x$'s parent $z$'s child. Then, we know, at $z$, we have the sum, $C_z > C_x$. Then, if we go down to $y$ in paths $u \\to w$, we have $K - sz_u \\geq sz_x > \\dfrac{N}{2} \\geq sz_u$, so $K - sz_u > sz_u$. So each step we are losing benefit.\n\nSo, $C_y < C_x$, $y$ can't be a good node.\n\nSo, if there exists two good nodes, $x, y$, then $sz_x = K - sz_x = sz_y = K - sz_y$. i.e., $sz_x = sz_y = \\dfrac{K}{2}$.\n\nThen, we want to prove, if $sz_x = N - sz_x$, then $x$ is a good node. This is easy, considering moving $x$ to $y$, where $y$ is a good node but $sz_y \\neq N - sz_y$. We can arrive $C_y > C_x$.\n\nThen,\n\n$$\n\\begin{array}{l}\n\\mathbb{E}(\\#) \\\\\n= \\sum_{F} p(F) (1 + \\sum_e T(e_u, e_v, F)) \\\\\n= \\sum_{F} p(F) + p(F) \\sum_e T(e_u, e_v, F) \\\\\n= 1 + \\sum_{F} p(F) \\sum_e T(e_u, e_v, F) \\\\\n= 1 + \\sum_e p(F) \\sum_{F} T(e_u, e_v, F)\n\\end{array}\n$$\n\n$T$ means if transfer from $e\\_u$ to $e\\_v$ is valid in $F$\n\nWhat is $\\sum_{F} T(e\\_u, e\\_v, F)$? As we proved, a transition is valid if and only if # of nodes at $u$'s side is same # of nodes at $v$'s side. So, it is\n\n$$\n\\binom{\\#_u}{K / 2} \\binom{\\#_v}{K / 2}\n$$\n\nSo, we know, answer is: $1 + \\sum_e p(F) \\binom{\\#_{e_1}}{K / 2} \\binom{\\#_{e_2}}{K / 2}$.\n\n`,l=new i.BlogDefinition({title:"CodeForces: Floating Islands",paths:i.BlogPaths.Codeforces,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,"Graph Theory","Expected Number"],createDate:a,updateDate:s})},8319:function(e,n,t){"use strict";t.r(n),t.d(n,{CodeforcesCountSubsequences:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,6,10),s=new Date(2023,6,10),r=`\nThe original question is: ${(0,i.urlOf)("https://codeforces.com/contest/1838/problem/E","E. Count Subsequences")}.\n\nI didn't solve this question. I got the transition state, but didn't catch the essential step.\n\nThe transition state is easy:\n\nLet $dp_{i, j}$ means for at b's $i$, there are at most first $j$ items of $a$ fitting in $b$ ($a_{j + 1}$ isn't in).\n\nThen,\n\n$$\ndp_{i, j} = \\begin{cases}\ndp_{i - 1, j - 1} + (k-1) dp_{i - 1, j}, j < n \\\\\ndp_{i - 1, j - 1} + k dp_{i - 1, j}, j = n\n\\end{cases}\n$$ \n\nWhat I did after that was I concluded that, if $j < n$, $dp_{i, j} = \\binom{i}{j} (k-1)^{i - j}$.\n\nThen, I derived\n\n$$\n\\begin{array}{l}\ndp_{m, n} = \\sum^{m-1}_{i=n-1} (k-1)^{i - (n - 1)} k^{m - 1 - i} \\binom{i}{n-1} \\\\\n= k^{m - n} \\sum^{m-1}_{i=n-1} (1 - \\dfrac{1}{k})^i \\binom{i}{n-1}, \\text{let } q = m - 1, p = n - 1, d = (1 - \\dfrac{1}{k}) \\\\\n= k^{q - p} \\sum^{q}_{i = p} d^i \\binom{i}{p} \n\\end{array} \n$$\n\nThen I tried to conclude a way to find $k^{q - p} \\sum^{q}_{i = p} d^i \\binom{i}{p}$ in $O(N \\log(N))$.\n\nBut the correct way is, to observe that, the whole solution is independent with the elements in array $a$, so, just assume $a_i \\equiv 1$.\n\nWe then, only need to conclude, how many sequences are there such that has less than $n$ $1$s. \n\nThe solution is clearly\n\n$$\nk^m - \\sum^{n-1}_{i=0} \\binom{m}{i} k^{m - i} = k^m - \\sum^{n-1}_{i = 0} \\dfrac{m^{(i)}}{i!} k^{m-i}\n$$\n\nThis can be calculated in $O(N\\log(N))$.\n\n### Other\n\nNotice that, this also says that:\n\n$$\n\\sum^{m}_{i=n} (k-1)^{i - n} k^{m - i} \\binom{i}{n} =  k^{m+1} - \\sum^{n}_{i = 0} \\binom{m+1}{i} k^{m-i+1}\n$$\n\nOr:\n\n$$\n\\sum^{n}_{i = 0} \\binom{m+1}{i} k^{m-i+1} + \\sum^{m}_{i=n} \\binom{i}{n} (k-1)^{i - n} k^{m - i} =  k^{m+1}\n$$\n\nThis could be an important identity because notice the LHS is binomial + hockey stick and RHS is a power.\n\n`,l=new i.BlogDefinition({title:"Codeforce Round 877 E: Count Subsequences",paths:i.BlogPaths.Codeforces,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,i.BlogTags.Codeforces],createDate:a,updateDate:s})},1566:function(e,n,t){"use strict";t.r(n),t.d(n,{VikaAndWiki:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,7,22),s=new Date(2023,7,22),r=`\nThe original question is: ${(0,i.urlOf)("https://codeforces.com/contest/1848/problem/F","F. Vika and Wiki")}.\n\nIf there is a special operation $\\mathcal{F}(a) : \\mathbb{A}^n \\to \\mathbb{A}^n$, where $a$ is an array, and outputs the new array. $\\mathbb{A}$ is type of array.\n\nSet $\\mathcal F ^n (a) = \\mathcal{F} (\\mathcal{F}^{n-1} (a))$.\n\nAsking to find, what is the smallest integer $n$ such that, $\\varphi [\\mathcal{F}^n (a)]$, where $\\varphi$ is a statement.\n\nIf $\\varphi$ satisfies a **special property**, that $\\varphi[\\mathcal{F}^n (a)] \\implies \\varphi[\\mathcal{F}^{n+1} (a)]$, then, we could do binary search on $n$.\n\nFind a large enough $R$ such that $\\varphi[\\mathcal{F}^n (a)]$, then $L = 0$, do binary search to find the first index.\n\n${(0,i.codeBlockOf)("cpp","\nif phi(a'), then return a\nlet l = 1, r = 10^9;\nwhile l < r, do {\n    let mid = (l + r) / 2;\n    let a' = F(a, mid);\n    if phi(a'), then {\n        r := mid;\n    } else {\n        l := mid + 1;\n    }\n}\n")}\n\nThen there is another problem: what if it isn't possible calculate $\\mathcal F^n(a)$ in $O(1)$?\n\nIf it is possible to calculate $\\mathcal F^{2^t} (a)$ in $O(1)$, then, repeat the following process:\n\ninitialize $l' = 0, r' = 2^{\\lceil \\log {r} \\rceil }$, add a new variable called $cnt = 0$ then:\n\n1. If perform $l := mid + 1$, then reset $a := \\mathcal F ^{mid} (a)$, reset $l := 1$, reset $r := r - mid$, $cnt := cnt + mid$\n2. If perform $r := mid$, then do the same as before, do nothing else.\n\nFinally, return $cnt + l$\n\nThe original question can be solved by this method, $\\varphi[a]: \\forall{x \\in a}, x = 0$.  \n \n`,l=new i.BlogDefinition({title:"Codeforces Round 885: Vika And Wiki",paths:i.BlogPaths.Codeforces,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,i.BlogTags.Codeforces],createDate:a,updateDate:s})},2702:function(e,n,t){"use strict";t.r(n),t.d(n,{Codeforces9012E:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,10,9),s=new Date(2023,10,9),r=`\nOriginal question is: ${(0,i.urlOf)("https://codeforces.com/contest/1874/problem/B","Jelly Fish And Math")}.\n\nThe key idea of the question is to reduce the number of cases:\n\nGiven an indexed array of elements $A$. Each operation, we are allowed to perform some specific operation $\\mathcal F_k$ on $A$, to get like:\n\n$$\nB = \\mathcal F_k(A), B_i = \\mathcal G_k (A_i)\n$$\n\nAsking some information about operates from $A$ to $C$.\n\nWhere $G_k$ is an operation. Notice this means the operation $\\mathcal G$ is independent from the index and other elements.\n\nThen, through the identity of function, we know, $A_i = A_j \\implies \\mathcal G_k(A_i) = \\mathcal G_k(A_j)$. Then, we know, if $A_i = A_j, C_i \\neq C_j$, there doesn't exists a sequence of operations to transform $A_i$ to $C_i$ and transform $A_j$ to $C_j$.\n\nSo, we can reduce the cases to different $A_i$ corresponding with different $C_i$.\n\nThat is, if we want to perform $A$ to $C$, there are actually only $(|T| + 1)^{|S|}$ cases to consider (one case is empty),\nwhere $|S|$ means the total number of cases of the beginning of $A_i$, and $|T|$ means the number of different $C_i$ we are pursuing.\n\nWe will have a map: $S \\to T$, meaning for each element in $S$, we want to transform it to a specific element in $T$.\n\nIf $(|T| + 1)^{|S|}$ is sufficiently small, we are able to perform a BFS on the problem. Let $f_{A \\to C}$ stands for the function that:\n\n$$\nf_{A\\to C}(A_i) = C_i: A_i = A_j \\implies f_{A \\to C} (A_i) = f_{A \\to C} (A_j)\n$$\n\nFor some other cases where doesn't exist, just simply set it as empty.\n\nThen, the BFS is (considering number of steps, for example):\n\n1. $dp[f_{C \\to C}] = 0$\n2. $dp[f_{P \\to C}] = \\min_{Q, \\exists k, \\mathcal F_k (P) = Q} \\{dp[f_{Q \\to C}]\\}$\n\nFor this question, notice that, $A$ can be considered as a binary array. Number of cases of $A$ is depending on $(a, b, m)$, has $|S| = 8$. Number of cases of $C$ is based on $(c, d)$ has $|T| = 4$. Totally, it is $5^8$ which is sufficiently small. So we could perform BFS.\n\n${(0,i.codeBlockOf)("cpp","\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nconstexpr ll MAXN = (5 * 5 * 5 * 5 * 5 * 5 * 5 * 5);\n\nconstexpr ll pow5[9] = {1, 5, 25, 125, 625, 3125, 15625, 78125, 390625};\nconstexpr ll INF = 0x3f3f3f3f3f3f3f3f;\n\nll dp[MAXN];\n\nll loc(ll msk, ll k) {\n    return (msk / pow5[k]) % 5;\n}\n\nll f(ll a, ll b, ll c) {\n    return a << 2 | b << 1 | c;\n}\n\nll g(ll x, ll y) {\n    return x << 1 | y;\n}\n\nll byop(ll z, ll op) {\n    ll msk = 0;\n    for (ll a = 0; a < 2; a++) {\n        for (ll b = 0; b < 2; b++) {\n            for (ll m = 0; m < 2; m++) {\n                ll t = loc(z, f(a, b, m));\n                ll x = (t >> 1) & 1, y = t & 1;\n                if (op == 0) {\n                    x = x & y;\n                } else if (op == 1) {\n                    x = x | y;\n                } else if (op == 2) {\n                    y = x ^ y;\n                } else if (op == 3) {\n                    y = y ^ m;\n                }\n                msk += pow5[f(a, b, m)] * g(x, y);\n            }\n        }\n    }\n    return msk;\n}\n\nvoid bfs() {\n    ll msk = 0;\n    for (ll a = 0; a < 2; a++) {\n        for (ll b = 0; b < 2; b++) {\n            for (ll m = 0; m < 2; m++) {\n                msk += pow5[f(a, b, m)] * g(a, b);\n            }\n        }\n    }\n    memset(dp, 0x3f, sizeof(dp));\n    queue<ll> q;\n    q.push(msk);\n    dp[msk] = 0;\n    while (!q.empty()) {\n        msk = q.front();\n        q.pop();\n        for (ll op = 0; op < 4; op++) {\n            ll t = byop(msk, op);\n            if (dp[t] == INF) {\n                dp[t] = dp[msk] + 1;\n                q.push(t);\n            }\n        }\n    }\n\n    for (ll i = 0; i < pow5[8] - 1; i++) {\n        for (ll j = 0; j < 8; j++) {\n            if (loc(i, j) == 4) {\n                for (ll t = 0; t < 4; t++) {\n                    dp[i] = min(dp[i], dp[i - (4 - t) * pow5[j]]);\n                }\n            }\n        }\n    }\n}\n\nvoid test() {\n    ll a, b, c, d, m;\n    cin >> a >> b >> c >> d >> m;\n    ll msk = pow5[8] - 1;\n    for (ll i = 0; i < 30; i++) {\n        ll p = (a >> i) & 1, q = (b >> i) & 1, r = (m >> i) & 1;\n        ll x = (c >> i) & 1, y = (d >> i) & 1;\n        if (loc(msk, f(p, q, r)) == 4) {\n            msk -= (4 - g(x, y)) * pow5[f(p, q, r)];\n        } else if (loc(msk, f(p, q, r)) != g(x, y)) {\n            cout << -1 << '\\n';\n            return;\n        }\n    }\n\n    if (dp[msk] == INF) {\n        cout << -1 << '\\n';\n        return;\n    }\n    cout << dp[msk] << '\\n';\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    bfs();\n    ll T;\n    cin >> T;\n    while (T --) {\n        test();\n    }\n}\n")}\n\n`,l=new i.BlogDefinition({title:"Codeforce 902 Div. 2 E: Jelly Fish And Math",paths:i.BlogPaths.Codeforces,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,"Graph Theory","Expected Number"],createDate:a,updateDate:s})},78:function(e,n,t){"use strict";t.r(n),t.d(n,{CodeforcesMonsters:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,4,4),s=new Date(2023,4,4),r=`\nThe original question is: ${(0,i.urlOf)("https://codeforces.com/contest/1810/problem/E","E. Monsters")}.\n\nFirstly, it is easy to see how to do it from one vertex having $a_i = 0$. We could just use a priority queue, each edge is considered as $(w, v), w = a_v$\n\nThen, we need generalize it to all vertexes. Clearly, we want to maintain a DSU able to keep size.\n\nObserve that, if there exists a vertex $k$, a vertex $i$, and a vertex $j$, $a_i = a_j = 0$, and we could go from $i$ to $k$, and go from $j$ to $k$, then we could either go from $j$ to all vertexes under DSU $i$ and $j$, or reverse.\n\nProof:\n\nLet all vertexes we could go from $i$ be $S$, and all vertexes we could go from $j$ be $T$, then let $p = \\argmax_{t \\in S \\cup T} {a_t}$. We know $p \\in S \\lor p \\in T$.\n\nWLOG, let $p \\in S$, then, all $a_j, j \\in T$ having $a_j \\leq a_p$, so we could go from $p$ to all vertexes in $T$ through vertex $k$.\n\nThen, we notice that, we only need to go through all points in $1$ to $N$. As long as we meet a point $i$ with $a_i = 0$, we bfs it. And we merge the edge left.\n\nThat is, if original edge of vertex $i$ is $S$, and there is a valid edge $u \\to v$ (which is $(v, a_v)$, and edges for $v$ is $T$. Then, in DSU, we merge $parent_i$ and $parent_v$. In heap, we say, $hp_{parent_i} = (S \\cup T) - (v, a_v)$. And search again. In this bfs, $vis_i$ is considered as $parent(i) \\neq i$.\n\nNotice that we don't need to consider the order we visiting two nodes $i$ and $j$. Assume $i < j$, If $p$ can be visited from $i$, then in $i$'s bfs, we will already visit $j$. If $p$ can be visited from $j$, then in $j$ we will go back to $i$ again.\n\nBut some important thing we need to notice here is that, since we use $parent_i \\neq i$ as $vis_i$, when we go from a small $i$ to a large $j$ in bfs that $a_i = a_j = 0$, we need to ensure that $j$ won't be the parent, so the DSU needs to ensure $i < j$ then $parent_j \\larr parent_i$.\n\nFinally, the problem becomes: how to efficiently union two heaps? (That is, calculate the ordered heap $S \\cup T -  (v, a_v)$ ).\n\nWe don't need to analyzing those complexities to enable brute force because we have an $O(1)$ merging heap actually. Use a ${(0,i.urlOf)("https://en.wikipedia.org/wiki/Pairing_heap","Pairing heap")} is enough. \n\nThe time complexity will be armotized by the edges: for each edge (directed), we add it once, remove it once. So complexity is $O(N \\log (N))$.\n\n${(0,i.codeBlockOf)("cpp","\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nconstexpr ll MAXN = 2e5 + 5;\n\nll idx;\npair<ll, ll> val[MAXN * 2];\nll chld[MAXN * 2];\nll sibling[MAXN * 2];\n\ninline ll meld(ll x, ll y) {\n    if (x == -1) {\n        return y;\n    }\n    if (y == -1) {\n        return x;\n    }\n    // x <= y\n    if (val[x].second > val[y].second) {\n        swap(x, y);\n    }\n    sibling[y] = chld[x];\n    chld[x] = y;\n    return x;\n}\n\ninline ll add(ll x, pair<ll, ll> v) {\n    ++idx;\n    val[idx] = v;\n    chld[idx] = -1;\n    sibling[idx] = -1;\n    return meld(x, idx);\n}\n\ninline ll mrg(ll x) {\n    if (x == -1 || sibling[x] == -1) {\n        return x;\n    }\n    ll y = sibling[x];\n    ll z = sibling[y];\n    return meld(mrg(z), meld(x, y));\n}\n\ninline pair<pair<ll, ll>, ll> pop(ll x) {\n    return {val[x], mrg(chld[x])};\n}\n\nll N, M;\nll a[MAXN];\nll pa[MAXN];\nll hp[MAXN];\nll sz[MAXN];\nvector<ll> adj[MAXN];\n\ninline ll paof(ll x) {\n    return pa[x] != x ? pa[x] = paof(pa[x]) : x;\n}\n\ninline void merge(ll x, ll y) {\n    x = paof(x);\n    y = paof(y);\n    if (x > y) {\n        swap(x, y);\n    }\n    pa[y] = x;\n    sz[x] += sz[y];\n    hp[x] = meld(hp[x], hp[y]);\n}\n\nvoid bfs(ll x) {\n    ll p = 0;\n    while (hp[p = paof(x)] != -1 && val[hp[p]].second <= sz[p]) {\n        auto [ed, newhp] = pop(hp[p]);\n        hp[p] = newhp;\n        auto [v, w] = ed;\n        if (paof(v) != p) {\n            merge(p, v);\n        }\n    }\n}\n\nvoid test() {\n    cin >> N >> M;\n    idx = 0;\n    for (ll i = 1; i <= N; i++) {\n        cin >> a[i];\n        pa[i] = i;\n        sz[i] = 1;\n        hp[i] = -1;\n        adj[i].clear();\n    }\n    for (ll i = 1; i <= M; i++) {\n        ll x, y;\n        cin >> x >> y;\n        adj[x].push_back(y);\n        adj[y].push_back(x);\n    }\n    for (ll i = 1; i <= N; i++) {\n        for (auto v : adj[i]) {\n            hp[i] = add(hp[i], {v, a[v]});\n        }\n    }\n    for (ll i = 1; i <= N; i++) {\n        if (a[i] == 0 && pa[i] == i) {\n            bfs(i);\n        }\n    }\n    if (sz[paof(1)] == N) {\n        cout << \"YES\" << '\\n';\n    } else {\n        cout << \"NO\" << '\\n';\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    ll T;\n    cin >> T;\n    while (T--) {\n        test();\n    }\n}\n")}\n`,l=new i.BlogDefinition({title:"CodeTON Round 4 E: Monsters",paths:i.BlogPaths.Codeforces,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,i.BlogTags.Codeforces],createDate:a,updateDate:s})},1207:function(e,n,t){"use strict";t.r(n),t.d(n,{CodeforcesLuckyChains:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2022,11,25),s=new Date(2022,11,25),r=`\nThe original question is: ${(0,i.urlOf)("https://codeforces.com/contest/1766/problem/D","Codeforces Lucky Chains")}.\n\nThis question is asking for find the minimum $k$ so that there exists a prime $q$, such that $q \\mid x$, $q \\mid y$\n\nSo, without loss of generality, let $x \\geq y$:\n\n$$\n\\begin{array}{l}\n\\gcd(x + k, y + k) \\\\\n= \\gcd(x - y, y + k) \\\\\n\\end{array}\n$$\n\n$x-y$ is fixed value, so prime factorize $x-y$, for each prime $p$, the smallest multiple appear for $y + k$ is\n$y + k = \\lceil \\frac{y}{p}\\rceil p$. The minimum $y+k$ is the answer\n\nSource code:\n\n${(0,i.codeBlockOf)("c++","\n#include <bits/stdc++.h>\nusing namespace std;\n \ntypedef int ll;\n \nvector<ll> prms;\nbool isp[10005];\n \ntemplate <typename F, typename T>\ninline T pf(F &&f, ll y, T t) {\n    for (auto &x : prms) {\n        if (x * x > y) {\n            break;\n        }\n        if (y % x == 0) {\n            t = f(x, t);\n        }\n        while (y % x == 0) {\n            y /= x;\n        }\n    }\n    if (y != 1) {\n        t = f(y, t);\n    }\n    return t;\n}\n \ninline pair<ll, ll> find_min_pf(ll x, pair<ll, ll> t) {\n    t.second = min(((t.first + x - 1) / x) * x, t.second);\n    return t;\n}\n \nll x, y;\n \ninline void test() {\n    cin >> x >> y;\n    if (x < y)\n        swap(x, y);\n    if (gcd(x, y) != 1) {\n        cout << 0 << '\\n';\n        return;\n    } else if (x - y == 1) {\n        cout << -1 << '\\n';\n        return;\n    }\n    x -= y;\n    pair<ll, ll> res = pf(find_min_pf, x, make_pair(y, 0x3f3f3f3f3f3f3f3f));\n    cout << (res.second - y) << '\\n';\n}\n \nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    fill(isp, isp + 10005, true);\n    for (ll i = 2; i < 10005; i++) {\n        if (isp[i]) {\n            prms.push_back(i);\n            for (ll j = i * 2; j < 10005; j += i) {\n                isp[j] = false;\n            }\n        }\n    }\n    ll T;\n    cin >> T;\n    while (T--)\n        test();\n}\n")}\n`,l=new i.BlogDefinition({title:"Codeforces Round 139 D: Lucky Chains",paths:i.BlogPaths.Codeforces,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,i.BlogTags.Codeforces],createDate:a,updateDate:s})},3732:function(e,n,t){"use strict";t.r(n),t.d(n,{GraphTheoryAddingEdges:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,5,21),s=new Date(2023,5,21),r=`\n\nQuestions as examples:\n\n1. ${(0,i.urlOf)("http://acm.student.cs.uwaterloo.ca/acm/problems/statements.pdf","ICPC Waterloo 2023 Winter Local D")}\n2. ${(0,i.urlOf)("https://cemc.uwaterloo.ca/contests/computing/past_ccc_contests/2023/ccc/seniorEF.pdf","CCC 23 S4")}\n3. ${(0,i.urlOf)("https://leetcode.com/problems/modify-graph-edge-weights/","Modify Graph Edge Weights")}\n\n## Basic Idea\n\nAssume we have a graph constructing by edges $G = e_1, e_2, ..., e_k$. And we have a validation function:\n\n$$f(G) = [\\forall q \\in \\text{path of } G, P(q)]$$\n\nwhere $P$ is a function based on a path.\n\nThen, we will know the property that, if $f(G) = 0, f(G \\cup \\{e'\\}) = 1$, then $P(q) = 0 \\implies e' \\in q$.\n\nProof: If $e' \\not \\in q$, then $q \\in \\text{path of } G, f(G) = 0$, contradict.\n\nBesides, because $f(G \\cup \\{e'\\}) = 1$, we know the existence of $q$.\n\nTherefore, we can add $e$ into graph one by one, assume $e$ is in the path $q$. Then adjust on $e$ such that $q$ would satisfy some special condition.\n\nThe template of these type of questions could be:\n\nProvides a subgraph $G'$ satisfying $f(G)$.\n\n## ICPC Waterloo 2023 Winter Local D\n\nClearly, the function $P$ is if there exist a cycle path on $G$. And we understand that $f(G)$ iff there exists a cycle. Also, we want the cost of $G'$ be minimum.\n\nNotice that edge is exponentially increasing. So, we would choose edge $i$ if and only if choosing all edges $0...i - 1$ won't work.\n\nSo, we sort it by edge cost, then one by one adding it into the graph.\n\nWhen adding $e_i$, we know $\\{e_0, e_1, ..., e_{i-1}\\}$. But if adding $e_i$ work, then it means $e_i$ is in the cycle path. So, when we are doing a bfs on $e_{i_0}$, we are able to reach $e_{i_1}$ without using the edge $e_i$. We can use a DSU to optimize it.\n\n## CCC 23 S4\n\nThis question isn't exactly the same. But it uses the similar idea. The question uses the proposition that "an edge $(u, v, w)$ is on a shortest path in $G$ if and only if $w = dis[u, v]$".\n\nProof:\n\n$L \\implies R$: If $e = (u, v, w)$ is on arbitrary shortest path in $G$, then $w$ should be $dis[u, v]$, otherwise replace it with a path from $u$ to $v$ with $dis[u, v]$, it is even shorter.\n\n$R \\implies L$: If $e = (u, v, w)$ having $w = dis[u, v]$, then $e$ can be on the shortest path from $u$ to $v$.\n\nSo, we sort all edges by $w$. Keep adding $e$ into graph $G$. When we reach $e$, we know it should be in graph only if $dis[u, v] = w$.\n\nHowever, even if $dis[u, v] = w$, we might not add it into the graph. So we proceed induction here.\n\nMaintain another graph $H$. We know we must insert the smallest edge $(w, c)$ into the graph.\n\nThen, $H_{i-1}$ is the edges we must insert into graph at $e_1 .. e_{i - 1}$.\n\n1. $e_i$ exists on shortest path if and only if $dis[u, v] = w$. If $dis_H[u, v] = w$, then all paths formed by $e_i$ in $G'$, can be replaced with the one in $H$, so we won't choose it. So we only choose when $dis_H[u, v] > w$.\n2. If $e_i$ is necessary for $H_{i-1}$, then no matter how to add $e_{i + 1}$ to $e_m$, $e_i$ is still necessary for $H_{i-1} \\cup S, S \\subseteq \\{e_{i + 1}, ..., e_m\\}$.\n3. This would work if $w$ are positive. But here, $w$ can be $0$. So when we are adding edges, we can sometimes using a $0$ edge with another $e_{i + 1}$ edge such that $w_{i + 1} = w_i$ to still perform same as $e_i$, but $c_{i + 1}$ can be smaller than $c_i$.\n4. So, to deal with this problem, we set $c$ is increasing after $w$. Then, if $e_i$ is necessary for $H_{i - 1} \\cup S$, while $dis_{H_{i - 1} \\cup S}[u_i, v_i] = w_i$, we know it concat some $e_{i + 1}$ having $w_{i + 1} = w_i$. Then, because $c_{i + 1} \\geq c_i$, $w_j = 0$ edges has been visited already, replacing $e_{i + 1}$ by $e_i$ doesn't change the shortest paths, but decreases $c$. So we still choose $e_i$.\n5. The proof of (4) can be considered as, if $dis_{H_{i - 1} \\cup S}[u_i, w_i] = w_i$, then $e_{i+1} \\in S$. But $(u_{i + 1}, w_{i + 1}) \\neq (u_i, w_i)$. So, $dis[u_i, w_i]$ is on the shortest path only because there exists $w = 0$ edges connecting. Then, we can prove that, no matter using $e_{i + 1}$ or $e_i$, all vertex's distance are the same. By contradiction, if in one of them it is larger than the other, but all vertex's in this case they are sharing $w=0$ edges, they should be the same.   \n\nSo, $e_i$ would be necessary iff $dis_H[u, v] > w$.\n\n## Modify Graph Edge Weights\n\nIn this case, our $P(q)$ is if $q$ is a path from $s$ to $d$ with distance $targ$.\n\nThen we make the edges with negative distance as $w = 1$. Add it into graph $G$, forming $G'$.\n\nIf $G'$ has $dis_{G'}[s, d] > targ$, then doesn't matter.\n\nIf it is $< targ$, then it means the edge with distance $1$ is in the shortest path. So, we add $1$ by $targ - dis$. Now, we know shortest path at most will be $targ$. However, if shortest path is not $targ$, then shortest path is $< targ$. Then we know the added edge isn't visited (otherwise it would be targ exactly). So original $G$ has a path $< targ$, contradict.\n\nSo, we only need to change the $w$ to $targ - dis$. \n \n`,l=new i.BlogDefinition({title:"Keep Adding Edges On Graph",paths:i.BlogPaths.Algorithms,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,"LeetCode","CCC","ICPC"],createDate:a,updateDate:s})},923:function(e,n,t){"use strict";t.r(n),t.d(n,{CollectCoin:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,3,26),s=new Date(2023,3,26),r=`\nThe original question is: ${(0,i.urlOf)("https://leetcode.com/problems/collect-coins-in-a-tree/","Collect Coins in a Tree\n")}.\n\nIt is easy to observe that the final path will consisting of a set of $u \\to v$ and $v \\to u$ s. And no edge will be visited more than 2 times.\n\nTherefore, in this case, we want to get the number of edges will be visited. And then multiply it by 2.\n\nIf the root is fixed, the question is easy, we can solve it by writing like:\n\n${(0,i.codeBlockOf)("c++","\nvoid dfsinit(int x, int p) {\n    dp[x] = 0;\n    pa[x] = p;\n    if (p == -1) dpth[x] = 0;\n    else dpth[x] = dpth[p] + 1;\n    has0[x] = cs[x];\n    has1[x] = false;\n    has2[x] = false;\n    for (auto v: adj[x]) {\n        if (v == p) continue;\n        dfsinit(v, x);\n        has1[x] = has0[v] || has1[v] || has1[x];\n        has2[x] = has1[v] || has2[v] || has2[x];\n        dp[x] += dp[v];\n        if (has2[v] || dp[v]) {\n            dp[x] ++;\n        }\n    }\n}\n")}\n\nHowever, we could start with arbitrary vertex. So it would be hard for us to brute force one by one.\n\nBut, we find the path is also a tree. So it doesn't matter where we treat it as a root. We only need to find a vertex which we have to go to anyways, and start at that vertex.\n\nIt is easy to find the vertex we have to go to. Firstly, start at root $0$ and init. Let the coined vertex with max depth be $u$.\n\nWe have to visit $v = pa[pa[u]]$ anyways. Because if we visit some child of $pa[u]$ instead, then it means there exists another coined vertex $t$ which is deeper than $u$, contradicting.\n\nSo, we start at $v$, do a dfs again, and get the answer.\n`,l=new i.BlogDefinition({title:"Collect Coins in a Tree",paths:i.BlogPaths.LeetCode,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,"LeetCode"],createDate:a,updateDate:s})},5041:function(e,n,t){"use strict";t.r(n),t.d(n,{MinimizeMaximumDifference:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2023,4,9),s=new Date(2023,4,9),r=`\nThe original question is: ${(0,i.urlOf)("https://leetcode.com/problems/minimize-the-maximum-difference-of-pairs/description/","Minimize the Maximum Difference of Pairs")}.\n\nThe question itself is easy. I am just writing to try to provide a relatively rigorous prove why this method would work.\n\nFormula:\n\n$$\nf(n) = \\begin{cases}\n1 + f(n + 2), a_n - a_{n+1} \\leq k, \\\\\nf(n + 1), a_n - a_{n+1} > k\n\\end{cases}\n$$\n\nAssume $a_n$ is sorted in decreasing order, go from back to front.\n\nProof:\n\nAssume we are on index $n$, and $a_{n} - a_{n + 1} > k$, then it is obvious that $f(n) = f(n + 1)$ because $a_n$ can't match with any other values.\n\nAssume we are on index $n$, and $a_n - a_{n+1} \\leq k$, then we firstly prove, if we choose the index $n$, we will choose index $n+1$ as pair. We know removing $a_{n+1}$ will be better than removing $a_{n+2}$. When we compare to remove $a_{n+i}$ and $a_{n+i+1}$, if $a_{n+i+1}$ can be pairing with $a_n$, we find $a_{n+i}, a_{n+i+2}, ...$ is absolutely worse than $a_{n+i+1}, a_{n + i + 2}, ...$. Also, assume in removing $a_{n + i + 1}$, all of $a_{n+1}, ..., a_{n + i - 1}$ can be paired with some indexes, then in removing $a_{n+i}$, they can also paired with those indexes. Therefore, we conclude that, if we can use a strategy in removing $a_{n + i + 1}$, we can always use same strategy in $a_{n + i}$ (since $a_{n + i} - a_{n + j} \\leq k$ if $j < i$). So removing smaller $i$ will be better.\n\nSecondly, we prove that if we are meeting a removable $a_n$, then we will always remove it. Assume we are removing $a_n$ and $a_{n+1}$ (as we proved before), we are left with $a_{n + 2}, ...$. If we are not removing $a_n$, we are removing $a_{n + 1}, a_{n+2} ...$. Then, Assume we can use $a_{n+2}, ...$ to form $t$, we want to prove, $a_{n+1}, a_{n + 2}, ...$ never form larger than $t + 1$ (the $1$ is our pair $(a_n, a_{n+1})$). If it form $q > t+1$, assume $a_{n+1}$ is paired with some index $j$ (since it has paired, otherwise it will be $q=a_{n+2}, ...=t$), then removing $a_{n+1}$ and $a_j$, we result in removed is $q-1$ and is also a subset of $a_{n+2}, ...$. So $q > t + 1$ means $q-1 > t$, contradicting. So we will always remove $a_n$ and $a_{n+1}$ if we can.\n\nThe solution is just an easy binary search.\n`,l=new i.BlogDefinition({title:"Minimize the Maximum Difference of Pairs",paths:i.BlogPaths.LeetCode,content:r,contentType:o._.Markdown,tags:[i.BlogTags.Algorithms,"LeetCode"],createDate:a,updateDate:s})},3478:function(e,n,t){"use strict";t.r(n),t.d(n,{NumberRecognition:function(){return l}});var i=t(4685),o=t(1102);const a=new Date(2022,8,4),s=new Date(2022,8,4),r=`\nBy using pytorch, I trained a number recognition AI, reaching high correctness.\n\n## Dataset\n\nThe dataset I choose is the MNIST. It contains 60K training data and 10K testing data.\n\n${(0,i.codeBlockOf)("python","\ndataset_train = torchvision.datasets.MNIST(MNIST_DATASET_PATH, train=True, transform=transform_train, download=True)\ndataset_test = torchvision.datasets.MNIST(MNIST_DATASET_PATH, train=False, transform=transform_train, download=True)\n")}\n\n## Transforms\n\nThe transform is normal ToTensor + Normalize. It is not useful to use random gray scale (because the MNIST dataset is already gray scaled) or random crop / random horizontal flip (because you cannot flip/crop the number and still asks for same output)\n\n${(0,i.codeBlockOf)("python","\ntransform_train = transforms.Compose([\ntransforms.ToTensor(),\ntransforms.Normalize((.5,), (.5,))\n])\n\ntransform_test = transforms.Compose([\n    transforms.ToTensor(),\n    transforms.Normalize((.5,), (.5,))\n])\n")}\n\n## Model\n\n### Normal one\n\nThe normal (original design) has the process like this:\n\n<img src="${t(8721)}" alt="normal_model" width="400px"/>\n\n${(0,i.codeBlockOf)("python","\nclass NRNormal(nn.Module):\n    network: nn.Module\n\n    def __init__(self):\n        super(NRNormal, self).__init__()\n\n        self.network = nn.Sequential(\n            # 1 * 28 * 28 -> 16 * 14 * 14\n            nn.Conv2d(1, 16, 3, padding=1),\n            nn.Conv2d(16, 16, 3, padding=1),\n            nn.MaxPool2d(2),\n            nn.BatchNorm2d(16),\n            nn.ReLU(),\n\n            # 16 * 14 * 14 -> 32 * 7 * 7\n            nn.Conv2d(16, 32, 3, padding=1),\n            nn.Conv2d(32, 32, 3, padding=1),\n            nn.MaxPool2d(2),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n\n            # 32 * 7 * 7 -> 64 * 4 * 4\n            nn.Conv2d(32, 64, 3, padding=1),\n            nn.Conv2d(64, 64, 3, padding=1),\n            nn.Conv2d(64, 64, 3, padding=1),\n            nn.MaxPool2d(2, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n\n            # 64 * 4 * 4 -> 64 * 4 * 4\n            nn.Conv2d(64, 64, 3, padding=1),\n            nn.Conv2d(64, 64, 3, padding=1),\n            nn.Conv2d(64, 64, 1, padding=1),\n            nn.MaxPool2d(2, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n\n            # 64 * 4 * 4 -> (64 * 4 * 4 = 512)\n            nn.Flatten(),\n            # 512 -> 256\n            nn.Linear(64 * 4 * 4, 256),\n            nn.Dropout(),\n            # 256 -> 256\n            nn.Linear(256, 256),\n            nn.Dropout(),\n            # 256 -> 10\n            nn.Linear(256, 10)\n        )\n\n    def forward(self, x):\n        return self.network(x)\n")}\n\nIt could be found that this model is based on VGG-16. Because there are not too many feature in a number image, I removed one layer and decreased the dimenisons of convolution to increase the efficiency.\n\nThe result shows the decrement of layers and dimensions don't influence the result too much - the correctness is around 99.2%\n\n![](${t(3998)})\n\n### Lite one\n\nEven though the normal version of convolution network works, its efficiency is not high enough still. So I removed the layer of the network again.\n\n${(0,i.codeBlockOf)("python","\nclass NRLite(nn.Module):\n    network: nn.Module\n\n    def __init__(self):\n        super(NRLite, self).__init__()\n\n        self.network = nn.Sequential(\n            # 1 * 28 * 28 -> 16 * 14 * 14\n            nn.Conv2d(1, 16, 3, padding=1),\n            nn.Conv2d(16, 16, 3, padding=1),\n            nn.MaxPool2d(2),\n            nn.BatchNorm2d(16),\n            nn.ReLU(),\n\n            # 16 * 14 * 14 -> 32 * 7 * 7\n            nn.Conv2d(16, 32, 3, padding=1),\n            nn.Conv2d(32, 32, 3, padding=1),\n            nn.MaxPool2d(2),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n\n            # 32 * 7 * 7 -> 64 * 4 * 4\n            nn.Conv2d(32, 64, 3, padding=1),\n            nn.Conv2d(64, 64, 3, padding=1),\n            nn.Conv2d(64, 64, 3, padding=1),\n            nn.MaxPool2d(2, padding=1),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n\n            # 64 * 4 * 4 -> (64 * 4 * 4 = 512)\n            nn.Flatten(),\n            # 512 -> 256\n            nn.Linear(64 * 4 * 4, 256),\n            nn.Dropout(),\n            # 256 -> 256\n            nn.Linear(256, 256),\n            nn.Dropout(),\n            # 256 -> 10\n            nn.Linear(256, 10)\n        )\n\n    def forward(self, x):\n        return self.network(x)\n")}\n\nIt could be found that the decrement of number of layers doesn't decrease the overall accuracy.\n\n![](${t(4622)})\n`,l=new i.BlogDefinition({title:"Number Recognition in Pytorch",paths:i.BlogPaths.Pytorch,content:r,contentType:o._.Markdown,tags:[i.BlogTags.AI,i.BlogTags.Pytorch,"VGG-16"],createDate:a,updateDate:s})},1439:function(e,n,t){"use strict";t.r(n),t.d(n,{AIGeneral:function(){return a}});var i=t(3436);const o="\n### Loss\n\n#### Cross Entropy Loss\n\nPytorch uses cross entropy loss **defaultly with softmax**.\n\n<br/>\n\n### Dropout\n\n1. It is better to set dropout **after** maxpooling.\n\n#### Between final linear layers\n\n1. Generally with a possibility of $0.5$\n\n#### Between other layers like convolution layers\n\n1. Generally with a possiblity of $0.1$\n\n### \n\n<br/>\n\n### Optimizer\n\n#### Adam\n\n- Learning rate: $3 \\times 10^{-4}$\n\n#### AdamW\n\n- Learning rate: $3 \\times 10^{-4}$\n- Weight decay: $10^{-n}, n \\in \\mathbb{N}$\n",a=new i.NoteDefinition({title:"General Tips",paths:i.NotePaths.AI,content:o,contentType:"markdown",category:i.NoteCategory.AI,reference:[]})},3436:function(e,n,t){"use strict";t.r(n),t.d(n,{BlogTags:function(){return h},NoteCategory:function(){return c},NoteDefinition:function(){return o},NotePaths:function(){return d},codeBlockOf:function(){return s},imgOf:function(){return r},urlOf:function(){return l}});const i=e=>e.split(" ").map((e=>e.toLowerCase())).join("-");class o{id;title;urlTitle;paths;content;contentType;category;reference;constructor({title:e,paths:n,content:t,contentType:o,category:a,reference:s}){this.title=e,this.urlTitle=i(this.title),this.paths=n,this.content=t,this.contentType=o,this.category=a,this.reference=s}idWith(e){return this.id=e,this}}const a=(e,n)=>{let t=0,i=e.length-1;while(t<=i&&e[t]===n)t++;while(i>=t&&e[i]===n)i--;return t>i?"":e.substring(t,i+1)},s=(e,n)=>a(`\n\`\`\`${e}\n${a(n,"\n")}\n\`\`\`\n`,"\n"),r=(e,n="")=>`![${n}](${e})`,l=(e,n="")=>`[${n}](${e})`,c={AI:"Artificial Intelligence"},d={AI:["Artificial Intelligence"],ResNet:["ResNet"]},h={AI:"Artificial Intelligence"}},7208:function(e,n,t){"use strict";t.r(n),t.d(n,{ResNet:function(){return a}});var i=t(3436);const o="\n\n$$\nx' = \\mathcal{A} (\\mathcal{F}(x) + h(x)) + g(x)\n$$\n\nwhere $\\mathcal{F}(x)$ is the fitting function, and $h(x)$ or $g(x)$ is a residual function. $\\mathcal{A}(x)$ is activation.\n\n### Location between $\\mathcal{A}$ and $h(x)$.\n\nThe original paper writes the residual network as $x' = \\mathcal{A} (\\mathcal{F}(x) + h(x))$.\n\nHowever, a possible better residual could be $x' = \\mathcal{F}(\\mathcal{A}(BN(x)))) + h(x)$ <sup>[2]</sup>.\n\nIn this case, we can obtain\n\n$$\nx_{L} = \\sum^{L-1}_{i = 0} \\mathcal{F_{i}} (x_{i}, \\theta_{i}) + x_0\n$$\n\n\n\n",a=new i.NoteDefinition({title:"ResNet",paths:i.NotePaths.AI,content:o,contentType:"markdown",category:i.NoteCategory.AI,reference:[["Deep Residual Learning for Image Recognition","https://doi.org/10.48550/arXiv.1512.03385"],["Identity Mappings in Deep Residual Networks","https://arxiv.org/pdf/1603.05027.pdf"]]})},7173:function(e,n,t){var i={"./Achievements":3534,"./Achievements.js":3534,"./BasicInformation":2552,"./BasicInformation.js":2552,"./Blogs":3162,"./Blogs.js":3162,"./ExternalLinks":9821,"./ExternalLinks.js":9821,"./Notes":3686,"./Notes.js":3686,"./Projects":4653,"./Projects.js":4653,"./Skills":3270,"./Skills.js":3270,"./Subpages":9743,"./Subpages.js":9743,"./blogs/BlogDefinition":4685,"./blogs/BlogDefinition.js":4685,"./blogs/agc-044-c/StrangeDance":6319,"./blogs/agc-044-c/StrangeDance.js":6319,"./blogs/ccc-23-s4/MinimumCostRoads":7545,"./blogs/ccc-23-s4/MinimumCostRoads.js":7545,"./blogs/codeforce-872-d-islands/FloatingIslands":9253,"./blogs/codeforce-872-d-islands/FloatingIslands.js":9253,"./blogs/codeforce-877-e-count-subsequences/CountSubsequences":8319,"./blogs/codeforce-877-e-count-subsequences/CountSubsequences.js":8319,"./blogs/codeforce-885-f-wiki/VikaAndWiki":1566,"./blogs/codeforce-885-f-wiki/VikaAndWiki.js":1566,"./blogs/codeforce-901-jelly-fish-and-math/JellyFishAndMath":2702,"./blogs/codeforce-901-jelly-fish-and-math/JellyFishAndMath.js":2702,"./blogs/codeforce-codeton-4-monsters/monsters":78,"./blogs/codeforce-codeton-4-monsters/monsters.js":78,"./blogs/codeforce-edu-139-lucky-chains/LuckyChains":1207,"./blogs/codeforce-edu-139-lucky-chains/LuckyChains.js":1207,"./blogs/graph-theory-adding-edge/GraphTheoryAddingEdge":3732,"./blogs/graph-theory-adding-edge/GraphTheoryAddingEdge.js":3732,"./blogs/leetcode-2603-collect-coins-in-a-tree/CollectCoin":923,"./blogs/leetcode-2603-collect-coins-in-a-tree/CollectCoin.js":923,"./blogs/leetcode-2616/MinimizeMaximumDifference":5041,"./blogs/leetcode-2616/MinimizeMaximumDifference.js":5041,"./blogs/number-recognition/NumberRecognition":3478,"./blogs/number-recognition/NumberRecognition.js":3478,"./blogs/number-recognition/img/lite_model_result.png":4622,"./blogs/number-recognition/img/normal_model.png":8721,"./blogs/number-recognition/img/normal_model_result.png":3998,"./img/github.svg":2905,"./img/head.png":2535,"./img/linkedin.svg":6167,"./img/map_location.svg":6210,"./img/message.svg":4179,"./note/AIGeneral":1439,"./note/AIGeneral.js":1439,"./note/Note":3436,"./note/Note.js":3436,"./note/ResNet":7208,"./note/ResNet.js":7208,"./projects/email_manager.png":45,"./projects/game_of_generals.png":1594,"./projects/numpy_nn.png":2547,"./projects/sc2_helper.png":9850,"./projects/website1.0.png":5140,"./projects/website2.0.png":920,"./projects/xkamework.png":9162,"./resume.pdf":9711};function o(e){var n=a(e);return t(n)}function a(e){if(!t.o(i,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=a,e.exports=o,o.id=7173},1539:function(e,n,t){"use strict";var i=t(9963),o=t(6252),a=t(3577);function s(e,n,t,i,s,r){const l=(0,o.up)("website-header"),c=(0,o.up)("el-header"),d=(0,o.up)("aside-bar"),h=(0,o.up)("el-aside"),u=(0,o.up)("top-bar"),p=(0,o.up)("router-view"),m=(0,o.up)("el-scrollbar"),$=(0,o.up)("el-main"),f=(0,o.up)("el-container");return(0,o.wg)(),(0,o.j4)(f,null,{default:(0,o.w5)((()=>[(0,o.Wm)(c,{style:{"padding-left":"0","padding-right":"0"},height:"15vh"},{default:(0,o.w5)((()=>[(0,o.Wm)(l)])),_:1}),(0,o.Wm)(f,null,{default:(0,o.w5)((()=>[this.$store.state.mode===i.WIDE_MODE?((0,o.wg)(),(0,o.j4)(h,{key:0,width:"20%",style:{"padding-top":"3%"}},{default:(0,o.w5)((()=>[(0,o.Wm)(d)])),_:1})):(0,o.kq)("",!0),this.$store.state.mode===i.NARROW_MODE?((0,o.wg)(),(0,o.j4)(c,{key:1,style:{height:"10vh","padding-left":"0","padding-right":"0"}},{default:(0,o.w5)((()=>[(0,o.Wm)(u)])),_:1})):(0,o.kq)("",!0),(0,o.Wm)(f,null,{default:(0,o.w5)((()=>[(0,o.Wm)($,{style:(0,a.j5)({height:this.$store.state.mainContainerHeight,padding:0})},{default:(0,o.w5)((()=>[(0,o.Wm)(m,{style:{padding:"0",height:"100%"}},{default:(0,o.w5)((()=>[(0,o.Wm)(p)])),_:1})])),_:1},8,["style"])])),_:1})])),_:1})])),_:1})}var r=t(2262);const l=700,c=1,d=2,h=1,u=2,p=()=>window.innerWidth<l?d:c,m=(0,r.iH)(p()),$={},f=(e,n)=>({type:h,wide:e,narrow:n,value:(0,r.iH)(p()===c?e:n)}),g=e=>({type:u,func:e,value:(0,r.iH)(e(window.innerWidth))}),w=(e,n,t)=>{$[e]=f(n,t)},_=(e,n)=>{$[e]=g(n)},v=()=>{m.value=p();for(let[e,n]of Object.entries($))n.type===h?m.value===c?n.value.value=n.wide:m.value===d&&(n.value.value=n.narrow):n.value.value=n.func(window.innerWidth)};w("titleMenuWidth","25%","75%"),w("mainContainerHeight","85vh","75vh"),w("mainContainerPaddingTop","3%","0%"),w("mainContainerPaddingBottom","3%","5%"),w("homePaddingRight","25%","10px"),w("blogPaddingTop","1.5%","7%");const b=600,y=1,x=2;_("projectCardsMode",(e=>e<b?x:y)),_("projectPaddingTop",(e=>e<b?"0%":"3%")),w("resumeFrameHeight","84.2vh","60vh"),window.onresize=()=>{v()};const k={style:{"margin-left":"5px"}},C={class:"collapse-menu-text"};function j(e,n,i,s,r,l){const c=(0,o.up)("el-avatar"),d=(0,o.up)("el-link"),h=(0,o.up)("router-link"),u=(0,o.up)("el-menu"),p=(0,o.up)("More"),m=(0,o.up)("el-icon"),$=(0,o.up)("el-dropdown-item"),f=(0,o.up)("el-dropdown-menu"),g=(0,o.up)("el-dropdown");return(0,o.wg)(),(0,o.iD)("div",null,[(0,o.Wm)(u,{mode:"horizontal",class:"menu",style:(0,a.j5)({height:"15vh",width:this.$store.state.titleMenuWidth,float:"left","padding-left":"1%","padding-right":"1%"}),ellipsis:!1},{default:(0,o.w5)((()=>[(0,o.Wm)(h,{style:{"margin-right":"auto"},custom:"",to:"/"},{default:(0,o.w5)((({href:e,route:n,navigate:i,isActive:r,isExactActive:l})=>[(0,o.Wm)(d,{class:"menu-name-text",href:e,onClick:i,style:{width:"100%"}},{default:(0,o.w5)((()=>[(0,o.Wm)(c,{src:t(2535),size:35},null,8,["src"]),(0,o._)("div",k,[(0,o._)("span",null,(0,a.zw)(s.title),1)])])),_:2},1032,["href","onClick"])])),_:1})])),_:1},8,["style"]),this.$store.state.mode===s.WIDE_MODE?((0,o.wg)(),(0,o.j4)(u,{key:0,mode:"horizontal",class:"menu",style:{height:"15vh",width:"75%",float:"right"},ellipsis:!1},{default:(0,o.w5)((()=>[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(s.items,(e=>((0,o.wg)(),(0,o.j4)(h,{custom:"",to:e.path},{default:(0,o.w5)((({href:n,route:t,navigate:i,isActive:r,isExactActive:l})=>[e.router?((0,o.wg)(),(0,o.j4)(d,{key:0,href:n,onClick:i,style:(0,a.j5)({width:`${s.itemWidth}%`,"font-size":"110%"})},{default:(0,o.w5)((()=>[(0,o.Uk)((0,a.zw)(e.name),1)])),_:2},1032,["href","onClick","style"])):(0,o.kq)("",!0),e.router?(0,o.kq)("",!0):((0,o.wg)(),(0,o.j4)(d,{key:1,href:e.path,style:(0,a.j5)({width:`${s.itemWidth}%`,"font-size":"110%"})},{default:(0,o.w5)((()=>[(0,o.Uk)((0,a.zw)(e.name),1)])),_:2},1032,["href","style"]))])),_:2},1032,["to"])))),256))])),_:1})):(0,o.kq)("",!0),this.$store.state.mode===s.NARROW_MODE?((0,o.wg)(),(0,o.j4)(g,{key:1,trigger:"click",style:{height:"15vh",float:"right","margin-right":"5%"},onCommand:s.handleCommand},{dropdown:(0,o.w5)((()=>[(0,o.Wm)(f,null,{default:(0,o.w5)((()=>[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(s.items,(e=>((0,o.wg)(),(0,o.j4)($,{style:{"text-align":"center"},command:e},{default:(0,o.w5)((()=>[(0,o._)("span",C,(0,a.zw)(e.name),1)])),_:2},1032,["command"])))),256))])),_:1})])),default:(0,o.w5)((()=>[(0,o.Wm)(m,{style:{cursor:"pointer",height:"100%"},onMouseenter:n[0]||(n[0]=e=>s.moreColor="gray"),onMouseleave:n[1]||(n[1]=e=>s.moreColor="black"),size:45,color:s.moreColor},{default:(0,o.w5)((()=>[(0,o.Wm)(p)])),_:1},8,["color"])])),_:1},8,["onCommand"])):(0,o.kq)("",!0)])}var T=t(5781),A=t(2119);const D=(0,o._)("div",{class:"paragraph"},[(0,o._)("h1",null,"Hello!"),(0,o.Uk)(" This is a website containing my personal profile such as my projects I have done, my resume, my achievements, etc. ")],-1),M=(0,o._)("div",{class:"paragraph"},[(0,o._)("h1",null,"Where I Am For Now?"),(0,o.Uk)(" I am currently an incoming student in University of Waterloo Honour Mathematics Program. ")],-1),S=(0,o._)("div",{class:"paragraph"},[(0,o._)("h1",null,"My Hobby"),(0,o.Uk)(' I am very interested in computer technology and programming. It is able to access my projects in "Skills" Section. ')],-1),z={class:"paragraph"},N=(0,o.Uk)(" Some other profiles: "),W={style:{"margin-top":"2%","margin-bottom":"2%"}},O=(0,o.Uk)("DM::OJ"),B={style:{"margin-top":"2%","margin-bottom":"2%"}},I=(0,o.Uk)("Codeforces"),P={style:{"margin-top":"2%","margin-bottom":"2%"}},q=(0,o.Uk)("LeetCode");function F(e,n,t,i,s,r){const l=(0,o.up)("el-divider"),c=(0,o.up)("el-link");return(0,o.wg)(),(0,o.iD)("div",{class:"home",style:(0,a.j5)({"padding-top":this.$store.state.mainContainerPaddingTop,"padding-bottom":this.$store.state.mainContainerPaddingBottom,"padding-right":this.$store.state.homePaddingRight,"padding-left":"10px"})},[D,(0,o.Wm)(l),M,(0,o.Wm)(l),S,(0,o.Wm)(l),(0,o._)("div",z,[N,(0,o._)("ul",null,[(0,o._)("li",W,[(0,o.Wm)(c,{style:{"font-size":"100%"},href:"https://dmoj.ca/user/YidiChen"},{default:(0,o.w5)((()=>[O])),_:1})]),(0,o._)("li",B,[(0,o.Wm)(c,{style:{"font-size":"100%"},href:"https://codeforces.com/profile/ericchenxktz"},{default:(0,o.w5)((()=>[I])),_:1})]),(0,o._)("li",P,[(0,o.Wm)(c,{style:{"font-size":"100%"},href:"https://leetcode.com/XKTZ/"},{default:(0,o.w5)((()=>[q])),_:1})])])])],4)}const H={key:0,class:"wide-mode-projects"},R={key:1,class:"narrow-mode-projects"};function L(e,n,t,i,s,r){const l=(0,o.up)("double-row-project-collection"),c=(0,o.up)("single-row-project-collection");return(0,o.wg)(),(0,o.iD)("div",{class:"projects",ref:"projectRef",style:(0,a.j5)({"padding-top":this.$store.state.mainContainerPaddingTop,"padding-bottom":this.$store.state.mainContainerPaddingBottom})},[this.$store.state.projectCardsMode===i.PROJECTS_WIDE_MODE?((0,o.wg)(),(0,o.iD)("div",H,[(0,o.Wm)(l,{projects:i.projects},null,8,["projects"])])):(0,o.kq)("",!0),this.$store.state.projectCardsMode===i.PROJECTS_NARROW_MODE?((0,o.wg)(),(0,o.iD)("div",R,[(0,o.Wm)(c,{projects:i.projects},null,8,["projects"])])):(0,o.kq)("",!0)],4)}function E(e,n,t,i,a,s){const r=(0,o.up)("project-card"),l=(0,o.up)("el-col"),c=(0,o.up)("el-row");return(0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(t.projects,(e=>((0,o.wg)(),(0,o.j4)(c,{style:{width:"100%","margin-top":"6%"}},{default:(0,o.w5)((()=>[(0,o.Wm)(l,{span:24},{default:(0,o.w5)((()=>[(0,o.Wm)(r,{"project-object":e},null,8,["project-object"])])),_:2},1024)])),_:2},1024)))),256)}const G={style:{padding:"0 10% 3%"}},K={class:"project-name"},U={class:"project-description"},X={class:"project-link"};function Z(e,n,i,s,r,l){const c=(0,o.up)("el-image"),d=(0,o.up)("GitHub"),h=(0,o.up)("el-link"),u=(0,o.up)("el-card");return(0,o.wg)(),(0,o.j4)(u,{class:"project-card","body-style":"padding: 0;",style:{height:"100%"}},{default:(0,o.w5)((()=>[(0,o.Wm)(c,{src:t(7173)(`./${i.projectObject.img}`),style:{height:"250px",width:"100%"}},null,8,["src"]),(0,o._)("div",G,[(0,o._)("h3",K,(0,a.zw)(i.projectObject.name),1),(0,o._)("div",U,(0,a.zw)(i.projectObject.desc),1),(0,o._)("div",X,[(0,o.Wm)(h,{underline:!1,href:i.projectObject.link,target:"_blank"},{default:(0,o.w5)((()=>[(0,o.Wm)(d,{size:35,color:s.linkColor,onMouseenter:n[0]||(n[0]=e=>s.linkColor="black"),onMouseleave:n[1]||(n[1]=e=>s.linkColor="gray"),style:{cursor:"pointer"}},null,8,["color"])])),_:1},8,["href"])])])])),_:1})}const Y=["width","height"],J=["fill"];function V(e,n,t,i,a,s){return(0,o.wg)(),(0,o.iD)("svg",{t:"1652972404576",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"2982","xmlns:xlink":"http://www.w3.org/1999/xlink",width:t.size,height:t.size},[(0,o._)("path",{d:"M511.6 76.3C264.3 76.2 64 276.4 64 523.5 64 718.9 189.3 885 363.8 946c23.5 5.9 19.9-10.8 19.9-22.2v-77.5c-135.7 15.9-141.2-73.9-150.3-88.9C215 726 171.5 718 184.5 703c30.9-15.9 62.4 4 98.9 57.9 26.4 39.1 77.9 32.5 104 26 5.7-23.5 17.9-44.5 34.7-60.8-140.6-25.2-199.2-111-199.2-213 0-49.5 16.3-95 48.3-131.7-20.4-60.5 1.9-112.3 4.9-120 58.1-5.2 118.5 41.6 123.2 45.3 33-8.9 70.7-13.6 112.9-13.6 42.4 0 80.2 4.9 113.5 13.9 11.3-8.6 67.3-48.8 121.3-43.9 2.9 7.7 24.7 58.3 5.5 118 32.4 36.8 48.9 82.7 48.9 132.3 0 102.2-59 188.1-200 212.9 23.5 23.2 38.1 55.4 38.1 91v112.5c0.8 9 0 17.9 15 17.9 177.1-59.7 304.6-227 304.6-424.1 0-247.2-200.4-447.3-447.5-447.3z","p-id":"2983",fill:t.color},null,8,J)],8,Y)}var Q={name:"GitHub",props:{size:Number,color:String}},ee=t(3744);const ne=(0,ee.Z)(Q,[["render",V],["__scopeId","data-v-07833e9a"]]);var te=ne,ie={name:"ProjectCard",props:["projectObject"],components:{Link:T.rUS,GitHub:te},setup(){const e=(0,r.iH)("gray");return{linkColor:e}}};const oe=(0,ee.Z)(ie,[["render",Z],["__scopeId","data-v-e44032d8"]]);var ae=oe,se={name:"SingleRowProjectCollection",components:{ProjectCard:ae},props:{projects:Array[Object]},setup(){}};const re=(0,ee.Z)(se,[["render",E]]);var le=re;function ce(e,n,t,i,a,s){const r=(0,o.up)("project-card"),l=(0,o.up)("el-col"),c=(0,o.up)("el-row");return(0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.projectsManaged,(e=>((0,o.wg)(),(0,o.j4)(c,{style:{width:"100%","margin-bottom":"6%"},gutter:20},{default:(0,o.w5)((()=>[(0,o.Wm)(l,{span:12},{default:(0,o.w5)((()=>[(0,o.Wm)(r,{"project-object":e[0]},null,8,["project-object"])])),_:2},1024),e.length>1?((0,o.wg)(),(0,o.j4)(l,{key:0,span:12},{default:(0,o.w5)((()=>[(0,o.Wm)(r,{"project-object":e[1]},null,8,["project-object"])])),_:2},1024)):(0,o.kq)("",!0)])),_:2},1024)))),256)}var de={name:"DoubleRowProjectCollection",components:{ProjectCard:ae},props:{projects:Array[Object]},setup(e){const n=e["projects"],t=(0,r.iH)([]);for(let i=0;i<n.length;i++)i%2===0&&t.value.push([]),t.value[t.value.length-1].push(n[i]);return{projectsManaged:t}}};const he=(0,ee.Z)(de,[["render",ce]]);var ue=he,pe=t(4653),me={name:"Projects",components:{DoubleRowProjectCollection:ue,SingleRowProjectCollection:le},setup(){return{projects:pe.projects,WIDE_MODE:c,NARROW_MODE:d,PROJECTS_WIDE_MODE:y,PROJECTS_NARROW_MODE:x}}};const $e=(0,ee.Z)(me,[["render",L],["__scopeId","data-v-69faf0fe"]]);var fe=$e;const ge={class:"title-skill"};function we(e,n,t,i,s,r){const l=(0,o.up)("el-button"),c=(0,o.up)("el-collapse-item"),d=(0,o.up)("el-collapse");return(0,o.wg)(),(0,o.iD)("div",{class:"skills",style:(0,a.j5)({"padding-top":this.$store.state.mainContainerPaddingTop,"padding-bottom":this.$store.state.mainContainerPaddingBottom})},[(0,o.Wm)(d,{modelValue:i.activeNames,"onUpdate:modelValue":n[0]||(n[0]=e=>i.activeNames=e)},{default:(0,o.w5)((()=>[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.skills,(e=>((0,o.wg)(),(0,o.j4)(c,{name:e.title},{title:(0,o.w5)((()=>[(0,o._)("span",ge,(0,a.zw)(e.title),1)])),default:(0,o.w5)((()=>[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(e.tags,(e=>((0,o.wg)(),(0,o.j4)(l,{style:{cursor:"pointer"}},{default:(0,o.w5)((()=>[(0,o.Uk)((0,a.zw)(e),1)])),_:2},1024)))),256))])),_:2},1032,["name"])))),256))])),_:1},8,["modelValue"])],4)}var _e=t(3270),ve={name:"Skills",setup(){const e=(0,r.iH)([]);for(let n of _e.skills.value)e.value.push(n.title);return{activeNames:e,skills:_e.skills}}};const be=(0,ee.Z)(ve,[["render",we],["__scopeId","data-v-2c192812"]]);var ye=be;const xe=e=>((0,o.dD)("data-v-33b15234"),e=e(),(0,o.Cn)(),e),ke=xe((()=>(0,o._)("h2",{style:{"font-size":"200%","text-decoration":"underline","text-align":"left",margin:"0"}}," Achievements ",-1))),Ce={class:"achievement",style:{"padding-top":"2%","padding-bottom":"2%"}},je={style:{"text-align":"left",padding:"0",margin:"0 0 1.5%"}},Te=["innerHTML"],Ae=["innerHTML"];function De(e,n,t,i,s,r){const l=(0,o.up)("el-table-column"),c=(0,o.up)("el-table");return(0,o.wg)(),(0,o.iD)("div",{class:"achievements",style:(0,a.j5)({"padding-top":this.$store.state.mainContainerPaddingTop,"padding-bottom":this.$store.state.mainContainerPaddingBottom})},[ke,((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.achievements,(e=>((0,o.wg)(),(0,o.iD)("div",Ce,[(0,o._)("h3",je,(0,a.zw)(e.name),1),(0,o._)("div",{style:{"margin-bottom":"1.5%","text-align":"left",color:"rgb(61, 65, 68)","font-family":"Source Sans Pro, Helvetica Neue, Arial, sans-serif"},innerHTML:e.description},null,8,Te),(0,o.Wm)(c,{data:e.dataTable,style:{width:"100%"},fit:!0},{default:(0,o.w5)((()=>[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(e.dataTypes,(e=>((0,o.wg)(),(0,o.j4)(l,{label:e.label,"min-width":e.width},{default:(0,o.w5)((n=>[(0,o._)("div",{innerHTML:n.row[e.name]},null,8,Ae)])),_:2},1032,["label","min-width"])))),256))])),_:2},1032,["data"])])))),256))],4)}var Me=t(3534),Se={name:"Achievements",setup(){return{achievements:Me.achievements}}};const ze=(0,ee.Z)(Se,[["render",De],["__scopeId","data-v-33b15234"]]);var Ne=ze,We={name:"Home",components:{Achievements:Ne,Skills:ye,Projects:fe,WebsiteHeader:Sn}};const Oe=(0,ee.Z)(We,[["render",F]]);var Be=Oe;const Ie={class:"note-group-title"},Pe={class:"note-link"};function qe(e,n,t,i,s,r){const l=(0,o.up)("el-link"),c=(0,o.up)("router-link");return(0,o.wg)(),(0,o.iD)("div",{class:"notes",style:(0,a.j5)({"padding-top":this.$store.state.blogPaddingTop,"padding-bottom":this.$store.state.mainContainerPaddingBottom})},[(0,o._)("div",null,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.blogGroups,(e=>((0,o.wg)(),(0,o.iD)("div",null,[(0,o._)("div",Ie,(0,a.zw)(e[0]),1),((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(e[1],(e=>((0,o.wg)(),(0,o.iD)("div",Pe,[(0,o.Wm)(c,{custom:"",to:`/blog/${e.id}/${e.urlTitle}`},{default:(0,o.w5)((({href:n,route:t,navigate:i,isActive:s,isExactActive:r})=>[(0,o.Wm)(l,{href:n,onClick:i,style:{"font-size":"18px"},underline:!1},{default:(0,o.w5)((()=>[(0,o.Uk)((0,a.zw)(e.title),1)])),_:2},1032,["href","onClick"])])),_:2},1032,["to"])])))),256))])))),256))])],4)}var Fe=t(9980),He=t(1102);const Re={class:"blog-nav"},Le={class:"note-component note-title"},Ee=["innerHTML"],Ge={class:"note-component info-block"},Ke={class:"info"},Ue=(0,o.Uk)(" Categories: "),Xe={class:"info"},Ze={class:"info"};function Ye(e,n,t,i,s,r){const l=(0,o.up)("el-breadcrumb-item"),c=(0,o.up)("el-breadcrumb"),d=(0,o.up)("el-divider"),h=(0,o.up)("FolderOpened"),u=(0,o.up)("el-icon"),p=(0,o.up)("el-tag"),m=(0,o.up)("Calendar");return(0,o.wg)(),(0,o.iD)("div",{class:"note",style:(0,a.j5)({"padding-top":this.$store.state.blogPaddingTop,"padding-bottom":this.$store.state.mainContainerPaddingBottom})},[(0,o._)("div",Re,[(0,o.Wm)(c,{separator:">"},{default:(0,o.w5)((()=>[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.paths,(e=>((0,o.wg)(),(0,o.j4)(l,null,{default:(0,o.w5)((()=>[(0,o.Uk)((0,a.zw)(e),1)])),_:2},1024)))),256))])),_:1})]),(0,o._)("div",Le,(0,a.zw)(i.title),1),(0,o.Wm)(d),(0,o._)("div",{class:"note-component blog-content",innerHTML:i.content},null,8,Ee),(0,o.Wm)(d),(0,o._)("div",Ge,[(0,o._)("div",Ke,[(0,o.Wm)(u,null,{default:(0,o.w5)((()=>[(0,o.Wm)(h)])),_:1}),Ue,((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.tags,(e=>((0,o.wg)(),(0,o.j4)(p,{style:{"margin-right":"1%"}},{default:(0,o.w5)((()=>[(0,o.Uk)((0,a.zw)(e),1)])),_:2},1024)))),256))]),(0,o._)("div",Xe,[(0,o.Wm)(u,null,{default:(0,o.w5)((()=>[(0,o.Wm)(m)])),_:1}),(0,o.Uk)(" Created at: "+(0,a.zw)(i.createDate.toDateString()),1)]),(0,o._)("div",Ze,[(0,o.Wm)(u,null,{default:(0,o.w5)((()=>[(0,o.Wm)(m)])),_:1}),(0,o.Uk)(" Last updated at: "+(0,a.zw)(i.updateDate.toDateString()),1)])])],4)}var Je=t(3162),Ve=(t(4503),{name:"Blog",components:{FolderOpened:T.JZA,Calendar:T.faS},setup(){const e=(0,A.yj)(),n=parseInt(e.params.id),{title:t,content:i,contentType:o,paths:a,tags:s,createDate:r,updateDate:l}=(0,Je.getBlog)(n),c=(0,He.J)(i,o);return{title:t,content:c,contentType:o,paths:a,tags:s,createDate:r,updateDate:l,id:n}}});const Qe=(0,ee.Z)(Ve,[["render",Ye],["__scopeId","data-v-ac5af798"]]);var en=Qe;new Fe;var nn={name:"Blogs",components:{Blog:en},setup(){const e=(0,r.iH)((()=>{let e={};for(let t of Je.blogs){let n=parseInt(t.createDate.getFullYear().toString());void 0===e[n]&&(e[n]=[]),e[n].push(t)}let n=[];for(let[t,i]of Object.entries(e))n.push([t,i]);return n.sort(((e,n)=>n[0]-e[0])),n})());return{blogGroups:e,BlogContentTypes:He._}}};const tn=(0,ee.Z)(nn,[["render",qe],["__scopeId","data-v-4ed73a53"]]);var on=tn;const an={class:"note-group-title"},sn={class:"note-link"};function rn(e,n,t,i,s,r){const l=(0,o.up)("el-link"),c=(0,o.up)("router-link");return(0,o.wg)(),(0,o.iD)("div",{class:"notes",style:(0,a.j5)({"padding-top":this.$store.state.blogPaddingTop,"padding-bottom":this.$store.state.mainContainerPaddingBottom})},[(0,o._)("div",null,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.noteGroups,(e=>((0,o.wg)(),(0,o.iD)("div",null,[(0,o._)("div",an,(0,a.zw)(e[0]),1),((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(e[1],(e=>((0,o.wg)(),(0,o.iD)("div",sn,[(0,o.Wm)(c,{custom:"",to:`/note/${e.id}/${e.urlTitle}`},{default:(0,o.w5)((({href:n,route:t,navigate:i,isActive:s,isExactActive:r})=>[(0,o.Wm)(l,{href:n,onClick:i,style:{"font-size":"18px"},underline:!1},{default:(0,o.w5)((()=>[(0,o.Uk)((0,a.zw)(e.title),1)])),_:2},1032,["href","onClick"])])),_:2},1032,["to"])])))),256))])))),256))])],4)}var ln=t(3686);new Fe;var cn={name:"Notes",components:{Blog:en},setup(){const e=(0,r.iH)((()=>{let e={};for(let t of ln.notes){let n=t.category;void 0===e[n]&&(e[n]=[]),e[n].push(t)}let n=[];for(let[t,i]of Object.entries(e))n.push([t,i]);return n.sort(((e,n)=>e[0]<n[0])),n})());return{noteGroups:e}}};const dn=(0,ee.Z)(cn,[["render",rn],["__scopeId","data-v-69def266"]]);var hn=dn;const un={class:"blog-nav"},pn={class:"note-component note-title"},mn=["innerHTML"],$n={key:0,class:"note-component info-block"},fn={class:"info",style:{"font-family":"'Times New Roman',serif"}},gn={class:"note-component info-block"},wn={class:"info"},_n=(0,o.Uk)(" Categories: ");function vn(e,n,t,i,s,r){const l=(0,o.up)("el-breadcrumb-item"),c=(0,o.up)("el-breadcrumb"),d=(0,o.up)("el-divider"),h=(0,o.up)("el-link"),u=(0,o.up)("FolderOpened"),p=(0,o.up)("el-icon"),m=(0,o.up)("el-tag");return(0,o.wg)(),(0,o.iD)("div",{class:"note",style:(0,a.j5)({"padding-top":this.$store.state.blogPaddingTop,"padding-bottom":this.$store.state.mainContainerPaddingBottom})},[(0,o._)("div",un,[(0,o.Wm)(c,{separator:">"},{default:(0,o.w5)((()=>[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.paths,(e=>((0,o.wg)(),(0,o.j4)(l,null,{default:(0,o.w5)((()=>[(0,o.Uk)((0,a.zw)(e),1)])),_:2},1024)))),256))])),_:1})]),(0,o._)("div",pn,(0,a.zw)(i.title),1),(0,o.Wm)(d),(0,o._)("div",{class:"note-component blog-content",innerHTML:i.content},null,8,mn),i.reference.length>0?((0,o.wg)(),(0,o.iD)("div",$n,[(0,o.Wm)(d),((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.reference.entries(),(e=>((0,o.wg)(),(0,o.iD)("div",fn,[(0,o.Wm)(h,{href:e[1]instanceof Array?e[1][1]:e[1],style:{"font-size":"16px"},underline:!1},{default:(0,o.w5)((()=>[(0,o.Uk)(" ["+(0,a.zw)(e[0]+1)+"] "+(0,a.zw)(e[1]instanceof Array?e[1][0]:e[1]),1)])),_:2},1032,["href"])])))),256))])):(0,o.kq)("",!0),(0,o.Wm)(d),(0,o._)("div",gn,[(0,o._)("div",wn,[(0,o.Wm)(p,null,{default:(0,o.w5)((()=>[(0,o.Wm)(u)])),_:1}),_n,((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(i.tags,(e=>((0,o.wg)(),(0,o.j4)(m,{style:{"margin-right":"1%"}},{default:(0,o.w5)((()=>[(0,o.Uk)((0,a.zw)(e),1)])),_:2},1024)))),256))])])],4)}var bn={name:"Note",components:{FolderOpened:T.JZA,Calendar:T.faS},setup(){const e=(0,A.yj)(),n=parseInt(e.params.id),{title:t,content:i,contentType:o,paths:a,tags:s,reference:r}=(0,ln.getNote)(n),l=(0,He.J)(i,o);return{title:t,content:l,contentType:o,paths:a,tags:s,id:n,reference:r}}};const yn=(0,ee.Z)(bn,[["render",vn],["__scopeId","data-v-0fd87efb"]]);var xn=yn;const kn=[{path:"/",name:"home",component:Be},{path:"/projects",name:"project",component:fe},{path:"/skills",name:"skill",component:ye},{path:"/achievements",name:"achievement",component:Ne},{path:"/blogs",name:"blogs",component:on},{path:"/notes",name:"notes",component:hn},{path:"/blog/:id/:title",name:"blog",component:en},{path:"/note/:id/:title",name:"note",component:xn}],Cn=(0,A.p7)({history:(0,A.r5)(),routes:kn});var jn=Cn,Tn=t(2552),An=t(9743),Dn={name:"WebsiteHeader",components:{More:T.Tkc},setup(){const e=(0,r.iH)(100/An.subpages.length),n=(0,r.iH)("black"),t=(0,r.iH)((e=>{e.router?jn.push(e.path):window.location=e.path}));return{WIDE_MODE:c,NARROW_MODE:d,items:An.subpages,itemWidth:e,moreColor:n,handleCommand:t,title:Tn.title}}};const Mn=(0,ee.Z)(Dn,[["render",j],["__scopeId","data-v-50a89b39"]]);var Sn=Mn;const zn={class:"aside-bar"},Nn={class:"aside-element"},Wn={class:"aside-element"},On={class:"aside-name"},Bn={class:"aside-education"},In={class:"aside-element"},Pn={style:{"vertical-align":"middle"},class:"aside-function-text"};function qn(e,n,i,s,r,l){const c=(0,o.up)("el-avatar"),d=(0,o.up)("el-image"),h=(0,o.up)("el-link");return(0,o.wg)(),(0,o.iD)("div",zn,[(0,o._)("div",Nn,[(0,o.Wm)(c,{src:t(2535),size:100},null,8,["src"])]),(0,o._)("div",Wn,[(0,o._)("div",On,(0,a.zw)(s.authorName),1),(0,o._)("div",Bn,(0,a.zw)(s.authorBiography),1)]),((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(s.links,(e=>((0,o.wg)(),(0,o.iD)("div",In,[(0,o.Wm)(h,{href:e.link},{default:(0,o.w5)((()=>[(0,o.Wm)(d,{src:t(7173)(`./${e.img}`),style:{width:"25px",height:"25px","vertical-align":"middle"}},null,8,["src"]),(0,o._)("span",Pn,(0,a.zw)(e.name),1)])),_:2},1032,["href"])])))),256))])}var Fn=t(9821),Hn={name:"AsideBar",components:{MapLocation:T.Yaq,Message:T.v0C},setup(){return{links:Fn.externalLinks,authorName:Tn.name,authorBiography:Tn.biography}}};const Rn=(0,ee.Z)(Hn,[["render",qn],["__scopeId","data-v-73674f7f"]]);var Ln=Rn;const En={class:"top-bar",style:{"text-align":"left","line-height":"10vh"}},Gn={class:"top-bar-element",style:{"line-height":"10vh"}},Kn={class:"top-bar-element",style:{padding:"0 10px 1% 15px"}},Un={class:"top-bar-text",style:{margin:"0"}},Xn={class:"top-bar-text",style:{"font-size":"14px"}},Zn=(0,o.Uk)(" Follow Me "),Yn={style:{padding:"3px 10px"}},Jn=["src"],Vn={style:{"vertical-align":"middle","margin-left":"10px",width:"110px"}};function Qn(e,n,i,s,r,l){const c=(0,o.up)("el-avatar"),d=(0,o.up)("el-button"),h=(0,o.up)("el-link"),u=(0,o.up)("el-dropdown");return(0,o.wg)(),(0,o.iD)("div",En,[(0,o._)("div",Gn,[(0,o.Wm)(c,{style:{"vertical-align":"middle"},src:t(2535),size:40},null,8,["src"])]),(0,o._)("div",Kn,[(0,o._)("h3",Un,(0,a.zw)(s.authorName),1),(0,o._)("div",Xn,(0,a.zw)(s.authorBiography),1)]),(0,o.Wm)(u,{class:"top-bar-element",style:{"padding-left":"20px"},trigger:"click"},{dropdown:(0,o.w5)((()=>[(0,o._)("div",Yn,[((0,o.wg)(!0),(0,o.iD)(o.HY,null,(0,o.Ko)(s.links,(e=>((0,o.wg)(),(0,o.j4)(h,{style:{display:"block",width:"150px","margin-top":"3px","margin-bottom":"3px"},href:e.link},{default:(0,o.w5)((()=>[(0,o._)("img",{src:t(7173)(`./${e.img}`),style:{"vertical-align":"middle",width:"20px"}},null,8,Jn),(0,o._)("span",Vn,(0,a.zw)(e.name),1)])),_:2},1032,["href"])))),256))])])),default:(0,o.w5)((()=>[(0,o.Wm)(d,{type:"default"},{default:(0,o.w5)((()=>[Zn])),_:1})])),_:1})])}var et={name:"TopBar",setup(){return{links:Fn.externalLinks,authorName:Tn.name,authorBiography:Tn.biography}}};const nt=(0,ee.Z)(et,[["render",Qn],["__scopeId","data-v-37255570"]]);var tt=nt,it={components:{TopBar:tt,AsideBar:Ln,WebsiteHeader:Sn},setup(){return{WIDE_MODE:c,NARROW_MODE:d}}};const ot=(0,ee.Z)(it,[["render",s]]);var at=ot,st=t(3907);const rt=(0,st.MT)({state(){const e={mode:m};for(let[n,t]of Object.entries($))e[n]=t.value;return e}});t(4415);var lt=t(2346);const ct=(0,i.ri)(at);ct.use(jn).use(lt.Z).use(rt).mount("#app")},1102:function(e,n,t){"use strict";t.d(n,{J:function(){return h},_:function(){return r}});var i=t(637),o=t(9980),a=t(6119),s=t(1008);const r={HTML:"html",Markdown:"markdown"},l=i.Z,c=new o({html:!0,highlight:(e,n)=>{if(n&&l.getLanguage(n))try{return`<pre class="hljs" style="padding: 10px;"><code>${l.highlight(e,{language:n}).value}</code></pre>`}catch(t){}return""}});c.use(a,{engine:s.Z,delimiters:"dollars",katexOptions:{macros:{"\\RR":"\\mathbb{R}"}}}),console.log(c.render("$a$"));const d=e=>c.render(e),h=(e,n)=>{switch(n){case r.Markdown:return d(e);case r.HTML:default:return e}}},2905:function(e,n,t){"use strict";e.exports=t.p+"img/github.ea8716ee.svg"},6167:function(e,n,t){"use strict";e.exports=t.p+"img/linkedin.605518e7.svg"},6210:function(e,n,t){"use strict";e.exports=t.p+"img/map_location.32204151.svg"},4179:function(e,n,t){"use strict";e.exports=t.p+"img/message.432230f9.svg"},4622:function(e,n,t){"use strict";e.exports=t.p+"img/lite_model_result.796285a9.png"},8721:function(e,n,t){"use strict";e.exports=t.p+"img/normal_model.06722a8b.png"},3998:function(e,n,t){"use strict";e.exports=t.p+"img/normal_model_result.89890c84.png"},2535:function(e,n,t){"use strict";e.exports=t.p+"img/head.205250d7.png"},45:function(e,n,t){"use strict";e.exports=t.p+"img/email_manager.5dac2a98.png"},1594:function(e,n,t){"use strict";e.exports=t.p+"img/game_of_generals.e10f2466.png"},2547:function(e,n,t){"use strict";e.exports=t.p+"img/numpy_nn.47f6ddd8.png"},9850:function(e,n,t){"use strict";e.exports=t.p+"img/sc2_helper.edb4668b.png"},5140:function(e,n,t){"use strict";e.exports=t.p+"img/website1.0.acfe15c0.png"},920:function(e,n,t){"use strict";e.exports=t.p+"img/website2.0.47013b40.png"},9162:function(e,n,t){"use strict";e.exports=t.p+"img/xkamework.b8103c0c.png"}},n={};function t(i){var o=n[i];if(void 0!==o)return o.exports;var a=n[i]={exports:{}};return e[i].call(a.exports,a,a.exports,t),a.exports}t.m=e,function(){var e=[];t.O=function(n,i,o,a){if(!i){var s=1/0;for(d=0;d<e.length;d++){i=e[d][0],o=e[d][1],a=e[d][2];for(var r=!0,l=0;l<i.length;l++)(!1&a||s>=a)&&Object.keys(t.O).every((function(e){return t.O[e](i[l])}))?i.splice(l--,1):(r=!1,a<s&&(s=a));if(r){e.splice(d--,1);var c=o();void 0!==c&&(n=c)}}return n}a=a||0;for(var d=e.length;d>0&&e[d-1][2]>a;d--)e[d]=e[d-1];e[d]=[i,o,a]}}(),function(){t.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return t.d(n,{a:n}),n}}(),function(){t.d=function(e,n){for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})}}(),function(){t.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)}}(),function(){t.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){t.p="/"}(),function(){var e={143:0};t.O.j=function(n){return 0===e[n]};var n=function(n,i){var o,a,s=i[0],r=i[1],l=i[2],c=0;if(s.some((function(n){return 0!==e[n]}))){for(o in r)t.o(r,o)&&(t.m[o]=r[o]);if(l)var d=l(t)}for(n&&n(i);c<s.length;c++)a=s[c],t.o(e,a)&&e[a]&&e[a][0](),e[a]=0;return t.O(d)},i=self["webpackChunkwebsite"]=self["webpackChunkwebsite"]||[];i.forEach(n.bind(null,0)),i.push=n.bind(null,i.push.bind(i))}();var i=t.O(void 0,[998],(function(){return t(1539)}));i=t.O(i)})();
//# sourceMappingURL=app.fc2168d0.js.map